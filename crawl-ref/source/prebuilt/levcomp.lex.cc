#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1073] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   81,   79,   76,   77,
       78,   74,   79,   72,   75,   73,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   76,   34,   36,   79,   79,   79,   79,   79,
       79,   80,    6,   80,   80,    4,    2,    3,   80,    2,
        2,    2,    2,    9,   10,   80,    9,    9,   80,   12,
       80,   32,   76,   33,   78,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   76,   32,   32,

       32,   32,   32,   32,   32,   32,   79,   28,   23,   28,
       74,   79,   27,   75,   73,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   28,   34,   36,   79,   79,   79,   79,   79,
       79,   15,   16,   78,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   79,   13,   15,   13,   13,   13,   13,   13,
       80,   21,   22,   80,   20,   80,   76,   77,   75,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   76,   34,   36,    0,    0,    0,
        0,   34,    0,    0,    0,    0,    0,    0,    0,   39,
        6,    5,    0,    0,    2,    3,    2,    0,    2,    2,
        2,    2,    9,    9,   10,    9,    9,    9,    0,   11,
        0,   12,   31,    0,   31,   76,   33,    0,    0,   33,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   30,   31,   76,   31,
       34,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       26,    0,   26,   28,   23,   28,    0,   23,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,    0,   25,    0,   26,   28,   26,   34,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   15,
       16,    0,    0,    0,   16,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,   14,   13,   15,   13,   13,   13,   13,   13,
       13,   13,   19,    0,   19,   21,   22,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    9,    9,    9,
        7,    0,    0,   29,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   34,   31,   31,   31,   31,   31,   31,    0,
       24,    0,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   34,

       34,   26,   26,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   35,    0,    0,    0,    0,    0,    2,    9,
        8,    0,    9,    7,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,    0,    0,   31,   31,   31,   31,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,    0,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
       64,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       63,   42,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    0,   38,    0,    0,    0,    0,    2,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,    0,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,    0,    0,   44,   50,   61,   67,   68,   70,   69,
       71,    0,    0,    0,    0,    0,    0,    0,   46,   62,
        0,   54,    0,    0,    0,    0,    0,   41,    1,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   53,   48,   56,   52,    0,    0,    0,    0,   65,
       55,   45,    0,   49,    0,    0,    0,    0,    1,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,   66,   47,    0,    0,
        0,    0,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   31,   26,   26,   26,   26,   26,   26,   26,    0,

       26,   26,   13,   13,   13,   13,   13,   13,    0,    0,
       58,    0,    0,   37,    0,    0,   31,   31,   31,   31,
       31,   31,    0,   31,   26,   26,   26,   26,   26,   26,
        0,   26,   13,   13,   13,   13,   57,    0,   60,    0,
       40,   31,   31,   31,   31,   31,   26,   26,   26,   26,
       26,   13,   13,   59,    0,   31,   31,   26,   26,   13,
        0,   31,   26,   13,    0,   31,   26,   13,   43,   31,
       26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   22,   33,   22,   22,   22,
        1,   34,    1,    1,   22,    1,   35,   22,   22,   36,

       37,   38,   22,   39,   40,   22,   22,   41,   22,   22,
       42,   43,   22,   44,   45,   46,   47,   48,   22,   22,
       22,   22,   49,    1,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1090] =
    {   0,
        0,   49,   53,   60,   64,   66,   49,   68,  116,  165,
      214,  263,  312,  361,   76,  170, 2328, 3533,   71, 3533,
     2308, 3533, 2291, 3533, 2285, 3533, 2275,   55, 2275,   60,
     2256,   68,   70,   74,   70, 2252, 2256, 2244,   75, 2241,
     2214, 2184,  409,    0, 3533,  155, 2172, 2160,  144,   67,
     2153, 3533, 3533, 2198,  180, 3533,    0, 3533, 2183,  189,
        0, 2154,  164, 2129, 3533, 2172,   58, 2117,  109, 3533,
     2157,  268,  275, 3533,  366,  373,  378,  383,  388,  392,
      414,  426,  432,  437,  460,  493,  470,  474,  479,  501,
      515,  520,  524,  529,  536,  543,  555,  562,  567,  571,

      577,  581,  589,  593,  605,  598,  269,  617, 3533,  632,
      374,  422, 3533,  433,  379,  468,  641,  582,  624,  639,
      651,  660,  647,  675,  662,  682,  652,  688,  690,  695,
      723,  696,  732,  709,  697,  736,  705,  740,  742,  746,
      748,  756, 3533,  789, 2147, 2143,    0, 2134,  160, 2125,
      164, 2107,  264,  168,  185,  253, 2103, 2105, 2097,  179,
     2105, 2093,  198, 2071,  796,  254, 2055, 2052,  151,  170,
      770,  803, 3533,  807, 3533,  811,  282, 3533, 2076, 2052,
     2059, 2047, 2040, 2053, 2043, 2045, 2041, 2022,  263, 2018,
     2022, 2011, 2002, 2002, 1998, 1990, 1992, 1995, 1986, 1972,

     1989, 1983,  270, 1960,    0,    0, 3533, 1936, 1935,  258,
     1922,    0,  268, 1933, 1928, 1951,  378, 1922, 1909, 3533,
     3533, 3533, 1951,  295,    0, 3533,    0, 1940,  609, 1923,
     1912,  384, 1885, 1874, 3533,  260, 1873,  815,  361, 3533,
     1917, 3533,  820,  824,  829,  844, 3533,  848,  857, 3533,
      862,  866,  870,  875,  882,  889,  893,  901,  915,  920,
      926,  932,  938,  942,  953,  963,  969,  973,  979,  986,
      991, 1004, 1012, 1025, 1019, 1029, 3533, 1037,    0, 1043,
     1047, 1052, 1056, 1060, 1064, 1074, 1068, 1078, 1087, 1095,
      887,  936, 1101, 1112, 3533, 1120, 1134, 3533, 1129, 1125,

     1139, 1140, 1148, 1153, 1146, 1155, 1160, 1166, 1179, 1173,
     1181, 1183, 1191, 1193, 1199, 1206, 1207, 1216, 1221, 1229,
     1230, 1234, 1241, 1254, 3533, 1267, 1243,    0, 1274, 1280,
     1288, 1296, 1294, 1298, 1300, 1302, 1304, 1310, 1314, 1337,
     3533, 1347, 1355, 1359, 3533,    0, 1907, 1889, 1869, 1857,
     1844, 1857, 1841, 1843, 1842, 1827,  378, 1827, 1831, 1822,
     1819, 1821, 1801, 1792, 1801, 1807, 1795, 1779, 1789, 1778,
      374, 1363, 3533, 1752,    0,  426, 1754, 1747, 1767,  395,
     1738, 1729, 1321, 1341, 1374, 1380, 3533, 1384, 1392, 1368,
     1396, 3533, 1401, 1760, 1743, 1740, 1734, 1735, 1724, 1715,

     1726, 1718, 1681, 1679, 1676,  432, 1683, 1674, 1656, 1667,
     1668, 1655, 1645, 1632, 1631, 1605, 1604, 1614, 1614, 1593,
     1407,  488, 1582, 1594, 1571, 1561, 1577, 1417, 1421, 1429,
     3533, 1433, 1438, 3533, 1442, 1446, 1450, 1456, 1460, 1473,
     1464, 1491, 1495, 1500, 1507, 1516, 1522, 1526, 1531, 1543,
     1550, 1557, 1565, 1571, 1581, 1585, 1590, 1596, 1602, 1608,
     1616, 1612, 1635, 1649, 1639, 1653, 1657, 1661, 1666, 1672,
     3533, 1676, 1538, 1480, 1662, 1688, 1697, 1702, 1707, 1708,
     1712, 1713, 1718, 1722, 1732, 1723, 1728, 1748, 1753, 1758,
     1759, 1766, 1772, 1781, 1783, 1789, 1793, 1799, 1800, 1827,

     1805, 1835, 1816, 1823, 1839, 1840, 1841, 1584, 1567, 1555,
     1540, 1549, 1540, 1538, 1545, 1527, 1508, 1506, 1496,  450,
     1507, 1496, 1485, 1486, 1487, 1472, 1472, 1462, 1463, 1444,
     1443, 1451, 1448, 1422, 1849,  910, 1415, 1425, 1409, 1397,
     1874, 3533, 1882, 1410, 1413, 1395, 1397, 1386, 1398, 1401,
     1376, 1367, 1368, 1360, 1352, 1355, 1342, 1339, 1337, 1341,
     1325, 1303, 1305, 1304, 1303, 1300, 1286, 1299, 1290, 1268,
     1247, 1886, 3533,  943, 1238, 1239, 1244, 1508, 1261, 1890,
     3533, 1894, 1898, 3533, 1902, 1907, 1912, 1917, 1927, 1932,
     1940, 1948, 1954, 1965, 1971, 1976, 1987, 1982, 1991, 2007,

     2015, 2022, 2031, 2040, 2035, 2046, 2050, 2055, 2073, 2081,
     2077, 2086, 2090, 2096, 2101, 2112, 2117, 2121, 2129, 1995,
     2134, 2138, 2107, 2143, 2142, 2169, 2151, 2164, 2160, 2182,
     2186, 2188, 2190, 2195, 2194, 2203, 2221, 2204, 2225, 2208,
     2230, 2234, 2238, 2244, 2243, 2239, 2248, 2281, 2255, 2256,
     2260, 2265, 2269, 1254, 1252, 1234, 1240, 1224, 1235, 1239,
     1218, 1222, 1214, 1200, 1194, 1197, 1187, 1180, 1182, 1179,
     1178, 1149, 1144, 1152, 1144, 1138, 1116, 1131, 1112, 1101,
     1079, 1073, 1082, 1576, 1081, 1093, 1080, 1095, 1084, 1076,
     3533, 1062, 1055, 1038, 1025, 1023,  998,  993,  454,  990,

     3533, 3533,  987,  984,  999,  998,  980,  990, 3533,  970,
      973,  945, 3533,  949,  945, 1643,  930,  936, 2304, 2308,
     2312, 2317, 2328, 2343, 2322, 2348, 2359, 2363, 2368, 2374,
     2379, 2383, 2390, 2394, 2399, 2414, 2425, 2430, 2434, 2438,
     2447, 2453, 2458, 2465, 2472, 2478, 2484, 2489, 2496, 2500,
     2505, 2506, 2420, 2512, 2286, 2530, 2543, 2439, 2545, 2551,
     2556, 2557, 2568, 2569, 2576, 2581, 2582, 2570, 2587, 2592,
     2593, 2617, 2623, 2612, 2628, 2604, 2629, 2639, 2637, 2643,
     2645, 2650, 2654, 2656,  933,  939,  923,  938,  921,  917,
      914,  901,  899,  896,  895,  871,  859,  465,  856,  850,

      845,  857,  845,  832,  843,  813,  818,  801,  804,  804,
      826,  824,  823, 3533, 3533, 3533, 3533, 3533, 3533, 3533,
     3533,  815,  485,  794,  782,  790,  784,  783, 3533, 3533,
      772, 3533,  776,  769,  739,  742,  732, 3533,  772, 2663,
     2687, 2696, 2678, 2691, 2702, 2709, 2713, 2718, 2722, 2727,
     2733, 2744, 2737, 2749, 2753, 2764, 2777, 2758, 2786, 2791,
     2795, 2800, 2805, 2811, 2819, 2826, 2831, 2772, 2835, 2836,
     2812, 2847, 2849, 2853, 2857, 2859, 2861, 2866, 2872, 2871,
     2877, 2873, 2887, 2896, 2907, 2883, 2908, 2918, 2913, 2920,
     2922, 2924, 2926, 2931, 2932,  761,  759,  757,  756,  492,

      738,  743,  750,  744,  743,  737,  734,  723,  686,  686,
      675, 3533, 3533, 3533, 3533,  692,  696,  691,  680, 3533,
     3533, 3533,  670, 3533,  659,  653, 1861,  622,  645, 2941,
     2946, 2957, 2967, 2977, 2981, 2985, 2990, 2994, 3001, 3008,
     3018, 3027, 3032, 3036, 3043, 3049, 3016, 3053, 3054, 3055,
     3063, 3070, 3069, 3071, 3062, 3076, 3077, 3096, 3097, 3104,
     3110, 3112, 3116,  618,  610,  606,  601,  612,  605,  598,
     1866,  569,  564,  556,  566,  557, 3533, 3533,  532, 1923,
      513, 1928, 3121, 3130, 3135, 3154, 3147, 3158, 3163, 3168,
     3172, 3178, 3184, 3185, 3173, 3196, 3189, 3191, 3198, 3209,

     3226, 3231,  537,  531,  540,  533,  507, 2274,  524,  515,
     3533,  503,  475, 3533, 2295,  461, 3233, 3237, 3242, 3247,
     3251, 3259, 3264, 3268, 3272, 3277, 3281, 3285, 3287, 3294,
     3298, 3299,  477,  465,  439,  410, 3533,  431, 3533,  382,
     3533, 3303, 3318, 3334, 3338, 3349, 3307, 3344, 3324, 3355,
     3329,  362,  329, 3533,  261, 3357, 3362, 3368, 3369,  255,
      247, 3375, 3382,  139,  103, 3388, 3383,   94, 3533, 3402,
     3392, 3533, 3436, 3442, 3448, 3454, 3460, 3466, 3472, 3478,
     3484, 3490, 3496, 3502, 3508, 3514, 3520,   54, 3526
    } ;

static yyconst flex_int16_t yy_def[1090] =
    {   0,
     1072,    1, 1073, 1074, 1075, 1075, 1076, 1076, 1072,    9,
     1072,   11, 1072,   13, 1077, 1077, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1078, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1079, 1072, 1080, 1072, 1072, 1081,
     1080, 1080, 1080, 1082, 1072, 1072, 1082, 1082, 1083, 1072,
     1072, 1084, 1072, 1072, 1072, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084,   43, 1085, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1086, 1072, 1072, 1072,
     1086, 1086, 1072, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086,   43, 1087, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1072, 1072, 1072, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1072, 1088,   43, 1088, 1088, 1088, 1088, 1088,
     1089, 1072, 1072, 1072, 1072, 1089, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072,   43, 1078, 1072, 1072, 1072, 1072,
     1072, 1078, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1080, 1072, 1080, 1072, 1080, 1080,
     1080, 1080, 1082, 1082, 1072, 1082, 1082, 1082, 1083, 1072,
     1072, 1072, 1084, 1084, 1084, 1072, 1072, 1072, 1072, 1072,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1072, 1084,   98, 1085,
     1085, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1086, 1086, 1086, 1072, 1072, 1072, 1072, 1072, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1072, 1072, 1086,  133, 1087, 1087,
     1087, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1072,
     1072, 1072, 1072, 1072, 1072, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1072, 1072, 1088,  165, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1089, 1089, 1089, 1072, 1072, 1072, 1072, 1072,
     1089, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1080, 1082, 1082, 1082,
     1072, 1072, 1084, 1072, 1072, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1086,
     1072, 1072, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1087,

     1078, 1086, 1086, 1086, 1086, 1086, 1086, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1089, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1080, 1082,
     1072, 1072, 1082, 1072, 1072, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1080, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1080, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1080, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,

     1086, 1086, 1088, 1088, 1088, 1088, 1088, 1088, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1088, 1088, 1088, 1088, 1072, 1072, 1072, 1072,
     1072, 1084, 1084, 1084, 1084, 1084, 1086, 1086, 1086, 1086,
     1086, 1088, 1088, 1072, 1072, 1084, 1084, 1086, 1086, 1088,
     1072, 1084, 1086, 1088, 1072, 1084, 1086, 1088, 1072, 1084,
     1086,    0, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072
    } ;

static yyconst flex_int16_t yy_nxt[3584] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   41,   18,   18,   42,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       43,   70,   71,   43,   44,   53,   54,   55,   56,  346,
       45,   52,   58,   59,   60,   61,   65,   66,   65,   66,
       70,   71,  177,   46,  181,  177,   62,  172,  173,  174,
      172,  182,  195,  184,  175,  187,  193,  191,  188,   47,
      185,   48,  189,   49,  200,  190,   50,   51,  192,  196,

      194,  218,  236,  219,   63, 1069,  201,  237,   67,  176,
       67,  240,  241,   68, 1069,   68,   72,   73,   74,   75,
       73,   72,   76,   77,   78,   77,   79,   80,   72,   81,
       82,   83,   72,   84,   72,   72,   85,   72,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   72,   95,   96,
       72,   97,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   98,  213,  216,   98,
       99,  172,  173,  174,  172,  379,  100, 1068,  175,  349,
      231,  194,  221,  223,  224,  359,  350,  352,  217,  101,
      222,  226,  228,  229,  353,  380,  360,  361,  368,  372,

      373,  372,  372,  176,  381,  102,  382,  103,  232,  104,
      369,  362,  105,  106,  107,  108,  109,  110,  108,  107,
      111,  112,  113,  112,  114,  115,  107,  116,  117,  118,
      107,  119,  107,  107,  120,  107,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  107,  130,  131,  107,  132,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  133,  363,  376,  133,  134,  244,
      292,  244,  244,  292,  135,  403,  246,  247,  248,  246,
      362,  355,  364,  177,  356, 1065,  177,  136,  357,  404,
      418,  358,  218,  419,  219,  421,  408,  221,  223,  224,

     1064,  245,  293,  137,  236,  138, 1061,  139,  249,  237,
      140,  141,   18,  142,  143,  144,  142,   18,   22,   23,
       24,  145,  146,   26,  147,  148,  149,  150,  147,  151,
      147,  147,  152,  147,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  147,  162,  163,  147,  164,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
       18,   18,  165,  240,  241,  165,   44,  248,  250,  248,
      248, 1060,   45, 1054,  244,  292,  244,  244,  292,  244,
      292,  244,  244,  292,  244,  166,  244,  244,  251,  244,
      517,  244,  244,  244,  532,  244,  244,  533,  251,  249,

      231,  167,  216,  168,  518,  169,  245,  293,  170,   51,
      205,  245,  293,  205,  206,  244,  245,  244,  244,  379,
      207,  245,  217,  292, 1055,  245,  292,  244,  232,  244,
      244,  252,  299,  244,  292,  244,  244,  292,  244,  380,
      244,  244, 1054,  299,  556,  253, 1053,  245,  255,  208,
     1039,  209,  254,  535,  522,  293,  210,  211,  557,  245,
      256,  244,  666,  244,  244,  245,  293,  257,  824,  292,
      245,  244,  292,  244,  244,  244,  667,  244,  244,  901,
      244, 1052,  244,  244,  825,  300,  265,  263, 1037,  574,
      258,  267,  574,  245,  244,  902,  244,  244,  264,  916,

      266,  293,  244,  245,  244,  244,  964,  245,  268, 1041,
      259, 1040,  245,  260, 1039,  917,  244,  261,  244,  244,
      262,  244,  965,  244,  244,  244,  245,  244,  244,  269,
      244, 1038,  244,  244,  245, 1037,  575,  244,  270,  244,
      244,  274, 1036,  272,  276,  277,  276,  276,  245, 1035,
      271, 1011,  275,  245, 1034,  273,  244,  245,  244,  244,
     1033, 1014,  245,  279,  247,  248,  279, 1013,  281,  245,
      281,  281,  244, 1012,  244,  244,  245, 1011,  244, 1010,
      244,  244,  244,  292,  244,  244,  292, 1009,  245,  283,
      244,  278,  244,  244,  244,  249,  244,  244,  303,  244,

      282,  244,  244,  266,  245, 1008,  244, 1007,  244,  244,
      245,  226,  228,  229,  245,  293,  978,  286,  294,  295,
      296,  294,  245,  977, 1006,  292,  245,  284,  292, 1005,
     1004,  245,  285,  296,  298,  296,  296,  287,  245,  288,
      292,  289,  292,  292, 1003,  292,  290,  304,  292,  929,
      297,  292,  292,  292,  305,  292,  292,  293,  982,  313,
      301,  292,  979,  292,  292,  297,  292,  302,  307,  306,
      978,  308,  293,  314,  293,  309,  292,  311,  310,  292,
      293,  977,  319,  292,  293,  293,  292,  315,  312,  292,
      317,  292,  292,  293,  292,  293,  292,  292,  292,  292,

      292,  292,  322,  976,  316,  318,  292,  320,  293,  292,
      330,  323,  212,  330,  975,  293,  974,  212,  973,  321,
      972,  293,  971,  293,  324,  325,  326,  324,  293,  293,
      293,  970,  327,  328,  295,  296,  328,  292,  293,  969,
      292,  292,  331,  292,  292,  924,  292,  292,  332,  292,
      292,  333,  292,  968,  922,  921,  293,  340,  341,  342,
      340,  920,  314,  967,  966,  297,  335,  915,  914,  293,
      913,  384,  912,  293,  384,  293,  929,  928,  927,  293,
      337,  293,  338,  334,  926,  925,  336,  924,  923,  343,
      344,  345,  344,  344,  922,  921,  339,  375,  341,  342,

      375,  920,  919,  385,  386,  387,  388,  386,  390,  387,
      390,  390,  391,  392,  393,  391,  430,  431,  432,  430,
      918,  244,  343,  244,  244,  244,  915,  244,  244,  343,
      433,  434,  433,  433,  914,  913,  389,  912,  911,  910,
      389,  909,  908,  907,  385,  246,  247,  248,  246,  248,
      247,  248,  248,  245,  832,  906,  830,  245,  435,  277,
      435,  435,  245,  244,  428,  244,  244,  244,  829,  244,
      244,  244,  251,  244,  244,  905,  244,  249,  244,  244,
      904,  249,  437,  244,  903,  244,  244,  900,  292,  436,
      244,  292,  244,  244,  244,  245,  244,  244,  438,  245,

      899,  440,  244,  245,  244,  244,  821,  820,  245,  439,
      819,  574,  818,  441,  574,  245,  244,  442,  244,  244,
      293,  244,  245,  244,  244,  817,  245,  244,  816,  244,
      244,  443,  815,  244,  245,  244,  244,  292,  445,  244,
      292,  244,  244,  244,  574,  244,  244,  574,  245,  814,
      444,  898,  446,  245,  244,  897,  244,  244,  575,  245,
      447,  448,  896,  839,  244,  245,  244,  244,  449,  293,
      244,  245,  244,  244,  244,  245,  244,  244,  838,  837,
      244,  450,  244,  244,  836,  835,  245,  244,  451,  244,
      244,  575,  244,  452,  244,  244,  245,  834,  455,  454,

      833,  832,  245,  831,  453,  244,  245,  244,  244,  830,
      829,  456,  245,  244,  828,  244,  244,  827,  826,  245,
      244,  823,  244,  244,  245,  458,  244,  822,  244,  244,
      276,  277,  276,  276,  821,  457,  820,  245,  244,  460,
      244,  244,  461,  459,  281,  245,  281,  281,  281,  819,
      281,  281,  245,  463,  434,  463,  463,  244,  245,  244,
      244,  244,  245,  244,  244,  244,  818,  244,  244,  244,
      245,  244,  244,  817,  462,  244,  282,  244,  244,  244,
      282,  244,  244,  464,  450,  282,  467,  816,  244,  245,
      244,  244,  286,  245,  465,  815,  244,  245,  244,  244,

      466,  245,  470,  471,  472,  470,  814,  245,  813,  812,
      811,  245,  287,  294,  295,  296,  294,  810,  468,  809,
      245,  296,  295,  296,  296,  808,  292,  807,  245,  292,
      292,  806,  469,  292,  293,  326,  325,  326,  326,  299,
      292,  292,  709,  292,  292,  297,  805,  292,  473,  292,
      292,  474,  292,  297,  292,  804,  292,  292,  293,  292,
      803,  292,  293,  475,  292,  477,  478,  292,  802,  801,
      292,  479,  293,  293,  292,  476,  480,  292,  800,  293,
      292,  293,  292,  292,  292,  292,  293,  292,  293,  702,
      701,  482,  292,  293,  292,  292,  481,  292,  799,  293,

      292,  484,  798,  292,  485,  483,  293,  292,  292,  486,
      292,  292,  293,  797,  293,  796,  293,  292,  488,  487,
      292,  795,  292,  489,  293,  292,  293,  491,  492,  794,
      292,  292,  293,  292,  292,  292,  793,  490,  292,  293,
      293,  493,  292,  495,  292,  292,  792,  292,  791,  293,
      691,  790,  496,  789,  293,  324,  325,  326,  324,  788,
      494,  497,  293,  293,  498,  787,  786,  293,  326,  325,
      326,  326,  785,  718,  293,  330,  293,  212,  330,  715,
      499,  330,  212,  212,  330,  714,  713,  293,  212,  500,
      471,  501,  500,  712,  711,  292,  212,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  331,  292,  710,
      709,  292,  505,  331,  292,  292,  708,  707,  292,  706,
      705,  331,  384,  502,  487,  384,  335,  293,  503,  293,
      704,  293,  703,  293,  504,  293,  702,  293,  340,  341,
      342,  340,  384,  293,  506,  384,  336,  293,  344,  341,
      344,  344,  701,  700,  385,  507,  372,  373,  372,  372,
      344,  699,  344,  344,  372,  373,  372,  372,  698,  390,
      343,  390,  390,  697,  385,  541,  542,  543,  541,  696,
      343,  386,  387,  388,  386,  390,  387,  390,  390,  695,
      694,  693,  343,  393,  392,  393,  393,  391,  392,  393,

      391,  389,  393,  392,  393,  393,  692,  385,  572,  573,
      572,  572,  691,  389,  690,  689,  688,  389,  580,  581,
      582,  580,  583,  584,  585,  583,  687,  686,  685,  385,
      430,  431,  432,  430,  432,  431,  432,  432,  684,  433,
      434,  433,  433,  435,  277,  435,  435,  244,  683,  244,
      244,  244,  535,  244,  244,  682,  681,  244,  586,  244,
      244,  244,  680,  244,  244,  244,  428,  244,  244,  679,
      428,  245,  678,  677,  244,  587,  244,  244,  234,  245,
      676,  292,  588,  245,  292,  675,  674,  591,  673,  245,
      589,  590,  244,  245,  244,  244,  244,  245,  244,  244,

      672,  244,  671,  244,  244,  621,  245,  593,  244,  716,
      244,  244,  716,  293,  670,  592,  594,  244,  669,  244,
      244,  668,  665,  244,  245,  244,  244,  244,  245,  244,
      244,  664,  244,  245,  244,  244,  595,  663,  598,  292,
      245,  596,  292,  662,  244,  600,  244,  244,  597,  245,
      620,  244,  599,  244,  244,  245,  717,  661,  244,  245,
      244,  244,  660,  659,  245,  601,  244,  658,  244,  244,
      657,  293,  244,  603,  244,  244,  245,  716,  604,  602,
      716,  656,  244,  245,  244,  244,  244,  605,  244,  244,
      245,  244,  655,  244,  244,  606,  654,  244,  245,  244,

      244,  579,  578,  244,  245,  244,  244,  608,  607,  244,
      577,  244,  244,  244,  245,  244,  244,  244,  245,  244,
      244,  421,  576,  245,  717,  609,  611,  571,  570,  245,
      612,  610,  569,  568,  567,  245,  463,  434,  463,  463,
      615,  245,  244,  615,  716,  245,  613,  716,  566,  245,
      614,  573,  614,  614,  244,  565,  244,  244,  244,  564,
      244,  244,  244,  292,  244,  244,  292,  244,  282,  244,
      244,  563,  245,  470,  471,  472,  470,  472,  471,  472,
      472,  562,  245,  561,  464,  560,  245,  616,  622,  292,
      245,  717,  292,  617,  245,  293,  559,  558,  292,  245,

      618,  292,  555,  292,  554,  293,  292,  619,  292,  292,
      553,  292,  292,  292,  292,  624,  292,  292,  623,  292,
      627,  293,  292,  292,  292,  625,  292,  292,  628,  292,
      293,  626,  292,  292,  552,  293,  292,  634,  551,  550,
      293,  293,  629,  630,  632,  293,  293,  549,  631,  292,
      635,  293,  292,  548,  292,  293,  293,  292,  633,  292,
      292,  293,  292,  292,  547,  293,  546,  292,  545,  637,
      292,  638,  544,  292,  540,  639,  292,  636,  539,  538,
      640,  293,  292,  537,  292,  292,  293,  292,  536,  534,
      292,  293,  293,  292,  292,  641,  531,  292,  642,  293,

      292,  292,  530,  292,  292,  293,  501,  471,  501,  501,
      529,  645,  643,  646,  293,  528,  293,  649,  644,  527,
      649,  526,  293,  525,  292,  524,  293,  292,  500,  471,
      501,  500,  293,  293,  647,  212,  648,  573,  572,  648,
      292,  292,  292,  292,  292,  292,  523,  522,  521,  293,
      572,  573,  572,  572,  520,  519,  293,  516,  515,  514,
      331,  513,  980,  651,  650,  980,  502,  980,  293,  512,
      980,  511,  293,  293,  293,  541,  542,  543,  541,  652,
      510,  509,  653,  543,  542,  543,  543,  572,  573,  572,
      572,  580,  581,  582,  580,  582,  581,  582,  582,  583,

      584,  585,  583,  585,  584,  585,  585,  385,  244,  981,
      244,  244,  508,  244,  981,  244,  244,  347,  244,  240,
      244,  244,  429,  428,  980,  719,  720,  980,  244, 1015,
      244,  244, 1015,  244,  234,  244,  244,  230,  427,  234,
      245,  244,  226,  244,  244,  245,  722,  234,  721,  244,
      245,  244,  244,  221,  426,  244,  724,  244,  244,  725,
      245,  723,  425,  424,  423,  245,  244,  422,  244,  244,
      220,  981,  244,  245,  244,  244, 1016,  244,  215,  244,
      244,  245,  214,  244,  726,  244,  244,  245,  244,  727,
      244,  244,  244,  728,  244,  244,  292,  420,  245,  292,

      731,  417,  416,  415,  245,  729,  414,  413,  244,  245,
      244,  244,  412,  752,  730,  245,  244,  732,  244,  244,
      245,  411,  410,  244,  245,  244,  244,  409,  293,  733,
      408,  734,  244,  735,  244,  244,  244,  407,  244,  244,
      245,  244,  736,  244,  244,  406,  405,  244,  245,  244,
      244,  244,  402,  244,  244,  245,  244,  401,  244,  244,
      738,  400,  739,  399,  245,  398,  740,  397,  245,  737,
      396,  395,  741,  245,  244,  394,  244,  244,  244,  245,
      244,  244,  244,  245,  244,  244,  179,  244,  245,  244,
      244,  244,  743,  244,  244,  378,  744,  614,  573,  614,

      614,  377,  615,  742,  244,  615,  245,  374,  292,  371,
      245,  292,  745,  244,  245,  244,  244,  370,  244,  245,
      244,  244,  244,  245,  244,  244,  755,  367,  366,  245,
      750,  365,  244,  750,  245,  292,  746,  354,  292,  292,
      293,  351,  292,  292,  292,  245,  292,  292,  753,  616,
      245,  348,  292,  347,  245,  292,  749,  347,  757,  242,
      747,  292,  245,  748,  292,  292,  238,  293,  292,  754,
      292,  293,  756,  292,  235,  293,  293,  751,  234,  230,
      758,  759,  761,  292,  293,  226,  292,  292,  760,  292,
      292,  292,  292,  293,  292,  292,  292,  293,  292,  292,

      221,  220,  293,  215,  292,  292,  764,  292,  292,  292,
      767,  762,  292,  763,  768,  293,  765,  766,  214,  293,
      204,  293,  292,  293,  772,  292,  292,  293,  293,  292,
      203,  292,  769,  770,  292,  292,  293,  293,  292,  292,
      292,  293,  292,  292,  292,  292,  773,  292,  292,  292,
      771,  774,  292,  202,  293,  776,  649,  292,  293,  649,
      292,  292,  777,  293,  292,  778,  292,  293,  775,  292,
      783,  293,  293,  783,  199, 1015,  293,  293, 1015,  198,
      197,  293,  648,  573,  572,  648,  186,  292,  293,  293,
      292,  183,  180,  293,  779,  179, 1015,  871,  293, 1015,

      782,  179,  293,  650,  780,  244,  781,  244,  244,  244,
      178,  244,  244,  244,  293,  244,  244,  784,  244,  293,
      244,  244, 1016,  244,  841,  244,  244, 1072,  843,  244,
     1072,  244,  244,  840, 1072, 1072, 1072,  245, 1072,  844,
      842,  245, 1072, 1016,  244,  245,  244,  244, 1072,  244,
      245,  244,  244, 1072,  845,  245, 1072, 1072, 1072,  846,
      244,  245,  244,  244,  244, 1072,  244,  244, 1072,  244,
      847,  244,  244, 1072,  848,  244,  245,  244,  244,  849,
      244,  245,  244,  244,  244,  850,  244,  244, 1072, 1072,
     1072,  244,  245,  244,  244,  244,  245,  244,  244, 1072,

      244,  245,  244,  244,  853, 1072, 1072,  245,  851, 1072,
     1072,  852,  245, 1072, 1072,  244,  245,  244,  244, 1072,
      854,  292,  855,  245,  292, 1072,  244,  245,  244,  244,
     1072,  244,  245,  244,  244,  244,  869,  244,  244,  244,
      292,  244,  244,  292, 1072,  858, 1072,  245,  244,  859,
      244,  244, 1072,  293,  244,  856,  244,  244,  245,  244,
      857,  244,  244,  245,  861, 1072,  244,  245,  244,  244,
      860,  245,  293,  244, 1072,  244,  244, 1072, 1072,  244,
      245,  244,  244, 1072, 1072,  244,  245,  244,  244, 1072,
      244,  245,  244,  244, 1072,  862,  863,  244,  245,  244,

      244,  750, 1072,  244,  750,  245,  244,  292,  244,  244,
      292,  245, 1072,  292, 1072, 1072,  292,  245,  864, 1072,
     1072, 1072,  245, 1072,  865, 1072, 1072, 1072, 1072,  245,
      866,  292, 1072,  245,  292,  868, 1072, 1072,  245,  293,
      870,  872, 1072, 1072,  292,  293,  292,  292,  751,  292,
     1072, 1072,  292,  867,  873,  292,  874,  292,  292, 1072,
      292,  292,  875,  293, 1072, 1072, 1072,  876,  877,  292,
      292,  292,  292,  292,  292, 1072,  293,  292,  293,  878,
      292, 1072,  292,  292,  293,  292,  292, 1072,  292,  293,
      293,  292, 1072,  292,  292,  881,  292,  292,  879, 1072,

     1072,  293,  293,  293,  880,  292, 1072, 1072,  292,  293,
      883,  882, 1072,  292,  293,  293,  292, 1072,  292, 1072,
      293,  292,  884,  885,  292,  293,  293,  292,  886,  292,
      292, 1072,  292,  292,  887,  888, 1072,  293,  292,  889,
      292,  292, 1072,  292,  292,  293,  292,  292, 1072,  292,
      293,  292, 1072, 1072,  292,  783,  293,  292,  783,  890,
      292,  293,  293,  891,  244, 1072,  244,  244, 1072, 1072,
      293, 1072,  293, 1072,  930, 1072,  293,  892,  293,  244,
      893,  244,  244,  293,  894, 1072, 1072,  293,  244,  293,
      244,  244,  244, 1072,  244,  244,  245,  244,  931,  244,

      244, 1072,  784,  244,  895,  244,  244,  932, 1072, 1072,
      244,  245,  244,  244,  244, 1072,  244,  244, 1072,  244,
      245,  244,  244,  244,  245,  244,  244, 1072,  244,  245,
      244,  244, 1072, 1072,  244,  245,  244,  244,  244, 1072,
      244,  244,  245, 1072,  933,  244,  245,  244,  244, 1072,
      244,  245,  244,  244,  244,  245,  244,  244,  934,  244,
      245,  244,  244,  936,  938,  244,  245,  244,  244,  937,
      245, 1072, 1072,  292,  935,  939,  292,  245,  244, 1072,
      244,  244,  245,  947, 1072, 1072,  245,  244,  940,  244,
      244,  245,  244, 1072,  244,  244,  244,  245,  244,  244,

     1072,  244, 1072,  244,  244,  293,  244,  941,  244,  244,
      245,  942,  244,  292,  244,  244,  292, 1072, 1072,  245,
      244,  943,  244,  244,  245, 1072, 1072,  244,  245,  244,
      244, 1072,  244,  245,  244,  244,  292,  292,  245,  292,
      292, 1072, 1072, 1072,  245,  293,  948,  949,  292, 1072,
      292,  292,  245,  292,  292,  945,  944,  292,  292,  245,
      292,  292,  292,  292,  245,  292, 1072,  292,  293,  293,
      292,  946,  292,  292,  292,  292,  292,  292,  292, 1072,
      293,  292,  293,  950,  292,  951,  293,  292,  292, 1072,
      293,  292,  293,  954,  293, 1072, 1072,  292,  955,  293,

      292,  952, 1072,  953,  293,  293,  293,  956,  292,  292,
      293,  292,  292, 1072,  292, 1072,  293,  292,  957,  292,
      293,  292,  292,  292,  292,  292,  292,  292,  292,  293,
      292,  959,  292,  292,  958,  292,  292, 1072,  960, 1072,
      293,  293,  244, 1072,  244,  244,  293,  244, 1072,  244,
      244,  293, 1072,  293, 1072,  293, 1072,  293,  244,  293,
      244,  244,  962, 1072,  293,  293, 1072, 1072,  244,  961,
      244,  244, 1072, 1072,  245, 1072,  963, 1072,  244,  245,
      244,  244,  244, 1072,  244,  244,  244, 1072,  244,  244,
      245,  244, 1072,  244,  244,  244, 1072,  244,  244, 1072,

      245,  984,  244,  983,  244,  244, 1072, 1072,  985,  244,
      245,  244,  244,  986,  245, 1072, 1072,  292,  245,  244,
      292,  244,  244,  245, 1072, 1072, 1072,  245,  244,  987,
      244,  244, 1072,  244,  245,  244,  244,  244, 1072,  244,
      244,  245, 1072,  988,  990,  989,  244,  990, 1072,  293,
      244,  245,  244,  244,  292,  292,  292,  292,  292,  292,
      245, 1072, 1072,  292,  292,  245,  292,  292, 1072,  245,
      292,  292,  292,  292,  292,  292,  245,  292,  292, 1072,
      292,  292,  245, 1072, 1072,  992,  293,  293,  293,  993,
      994,  991,  995, 1072,  996,  293,  293,  292,  292, 1072,

      292,  292,  293,  293,  293,  292, 1072,  997,  292,  293,
      293,  292, 1072, 1000,  292,  998, 1000,  292, 1072,  999,
      292, 1072,  244, 1072,  244,  244, 1072, 1072, 1072,  293,
      293,  244, 1072,  244,  244, 1072,  244,  293,  244,  244,
     1072, 1072, 1072,  293, 1017,  293, 1019, 1072,  244,  293,
      244,  244, 1002, 1018,  245,  244, 1072,  244,  244,  244,
     1001,  244,  244,  245,  244, 1072,  244,  244,  245,  990,
     1020,  244,  990,  244,  292,  244,  244,  292, 1072, 1023,
      245,  244, 1023, 1072, 1027,  292,  292,  245,  292,  292,
      292,  245,  292,  292, 1072,  292,  245,  292, 1021,  292,

      292,  245,  292, 1072, 1072,  245,  293, 1025, 1026, 1072,
     1000,  245, 1028, 1000, 1072, 1072,  991,  293,  293, 1072,
     1022, 1072,  293, 1072,  293, 1072, 1024,  292, 1072,  293,
      292,  293, 1031, 1029,  244, 1031,  244,  244,  244, 1072,
      244,  244,  293,  244, 1042,  244,  244, 1072,  244, 1072,
      244,  244,  244, 1043,  244,  244, 1072, 1001, 1044,  293,
      244, 1072,  244,  244,  293, 1023,  245,  244, 1023,  244,
      245,  244,  244,  292, 1030,  245,  292, 1072,  292, 1032,
      245,  292,  292, 1047,  245,  292,  292, 1045,  292,  292,
     1072,  292,  245, 1048, 1072,  292, 1049,  245,  292, 1031,

      292,  245, 1031,  292,  244,  293,  244,  244,  292, 1072,
      293,  292, 1024, 1072,  293, 1072, 1046, 1072,  293,  244,
      293,  244,  244, 1050, 1072,  292, 1072,  293,  292, 1056,
      292,  293,  293,  292, 1072,  244,  245,  244,  244,  244,
      293,  244,  244, 1072, 1072,  292, 1032, 1051,  292, 1072,
      244,  245,  244,  244, 1072, 1058,  292,  293,  244,  292,
      244,  244,  293,  244, 1072,  244,  244,  245, 1072,  292,
      292,  245,  292,  292, 1072, 1072,  244,  293,  244,  244,
     1057, 1072,  245,  292,  292, 1072,  292,  292,  293,  244,
      245,  244,  244,  292, 1071,  245,  292, 1059, 1072, 1070,

     1072,  293,  293,  244, 1072,  244,  244, 1062,  245, 1072,
     1072, 1072, 1072, 1066, 1063,  293,  293, 1072, 1072, 1072,
     1067,  245, 1072, 1072, 1072,  293, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072,  245,   52,   52,   52,   52,
       52,   52,   57,   57,   57,   57,   57,   57,   64,   64,
       64,   64,   64,   64,   69,   69,   69,   69,   69,   69,
      171,  171,  171,  171,  171,  171,  212,  212, 1072,  212,
      212,  212,  222,  222,  222,  222,  222,  222,  225, 1072,
     1072, 1072,  225,  225,  227,  227,  227,  227,  227,  227,
      233,  233, 1072, 1072,  233,  233,  239,  239,  239,  239,

      239,  239,  243,  243, 1072,  243,  243,  243,  280,  280,
     1072,  280,  280,  280,  291,  291, 1072, 1072, 1072,  291,
      329,  329, 1072,  329,  329,  329,  383,  383, 1072, 1072,
     1072,  383,   17, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072
    } ;

static yyconst flex_int16_t yy_chk[3584] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    7,    7,    2,    2,    3,    3,    3,    3, 1088,
        2,    4,    4,    4,    4,    4,    5,    5,    6,    6,
        8,    8,   19,    2,   28,   19,    4,   15,   15,   15,
       15,   28,   35,   30,   15,   32,   34,   33,   32,    2,
       30,    2,   32,    2,   39,   32,    2,    2,   33,   35,

       34,   50,   67,   50,    4, 1068,   39,   67,    5,   15,
        6,   69,   69,    5, 1065,    6,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   46,   49,   10,
       10,   16,   16,   16,   16,  169,   10, 1064,   16,  149,
       63,   46,   55,   55,   55,  154,  149,  151,   49,   10,
       60,   60,   60,   60,  151,  169,  154,  155,  160,  163,

      163,  163,  163,   16,  170,   10,  170,   10,   63,   10,
      160,  155,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   12,  156,  166,   12,   12,   72,
      107,   72,   72,  107,   12,  189,   73,   73,   73,   73,
      166,  153,  156,  177,  153, 1061,  177,   12,  153,  189,
      203,  153,  210,  203,  210,  213,  213,  224,  224,  224,

     1060,   72,  107,   12,  236,   12, 1055,   12,   73,  236,
       12,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   14,  239,  239,   14,   14,   75,   75,   75,
       75, 1053,   14, 1052,   76,  111,   76,   76,  111,   77,
      115,   77,   77,  115,   78,   14,   78,   78,   77,   79,
      357,   79,   79,   80,  371,   80,   80,  371,   79,   75,

      232,   14,  217,   14,  357,   14,   76,  111,   14,   14,
       43,   77,  115,   43,   43,   81,   78,   81,   81,  380,
       43,   79,  217,  112, 1040,   80,  112,   82,  232,   82,
       82,   81,  112,   83,  114,   83,   83,  114,   84,  380,
       84,   84, 1038,  114,  406,   82, 1036,   81,   83,   43,
     1035,   43,   82,  376,  376,  112,   43,   43,  406,   82,
       84,   85,  520,   85,   85,   83,  114,   84,  699,  116,
       84,   87,  116,   87,   87,   88,  520,   88,   88,  798,
       89, 1034,   89,   89,  699,  116,   88,   87, 1033,  422,
       85,   89,  422,   85,   86,  798,   86,   86,   87,  823,

       88,  116,   90,   87,   90,   90,  900,   88,   89, 1016,
       86, 1013,   89,   86, 1012,  823,   91,   86,   91,   91,
       86,   92,  900,   92,   92,   93,   86,   93,   93,   90,
       94, 1010,   94,   94,   90, 1009,  422,   95,   91,   95,
       95,   94, 1007,   93,   96,   96,   96,   96,   91, 1006,
       92, 1005,   95,   92, 1004,   93,   97,   93,   97,   97,
     1003,  981,   94,   98,   98,   98,   98,  979,   99,   95,
       99,   99,  100,  976,  100,  100,   96,  975,  101,  974,
      101,  101,  102,  118,  102,  102,  118,  973,   97,  101,
      103,   97,  103,  103,  104,   98,  104,  104,  118,  106,

       99,  106,  106,  101,  100,  972,  105,  970,  105,  105,
      101,  229,  229,  229,  102,  118,  969,  104,  108,  108,
      108,  108,  103,  968,  967,  119,  104,  102,  119,  966,
      965,  106,  103,  110,  110,  110,  110,  104,  105,  105,
      120,  105,  117,  120,  964,  117,  106,  119,  123,  929,
      108,  123,  121,  127,  119,  121,  127,  119,  928,  123,
      117,  122,  926,  125,  122,  110,  125,  117,  121,  120,
      925,  121,  120,  123,  117,  121,  124,  122,  121,  124,
      123,  923,  127,  126,  121,  127,  126,  124,  122,  128,
      125,  129,  128,  122,  129,  125,  130,  132,  135,  130,

      132,  135,  129,  919,  124,  126,  137,  128,  124,  137,
      134,  130,  134,  134,  918,  126,  917,  134,  916,  128,
      911,  128,  910,  129,  131,  131,  131,  131,  130,  132,
      135,  909,  132,  133,  133,  133,  133,  136,  137,  908,
      136,  138,  134,  139,  138,  907,  139,  140,  136,  141,
      140,  137,  141,  906,  905,  904,  131,  142,  142,  142,
      142,  903,  136,  902,  901,  133,  139,  899,  898,  136,
      897,  171,  896,  138,  171,  139,  839,  837,  836,  140,
      140,  141,  140,  138,  835,  834,  139,  833,  831,  142,
      144,  144,  144,  144,  828,  827,  141,  165,  165,  165,

      165,  826,  825,  171,  172,  172,  172,  172,  174,  174,
      174,  174,  176,  176,  176,  176,  238,  238,  238,  238,
      824,  243,  144,  243,  243,  244,  822,  244,  244,  165,
      245,  245,  245,  245,  813,  812,  172,  811,  810,  809,
      174,  808,  807,  806,  176,  246,  246,  246,  246,  248,
      248,  248,  248,  243,  805,  804,  803,  244,  249,  249,
      249,  249,  245,  251,  238,  251,  251,  252,  802,  252,
      252,  253,  251,  253,  253,  801,  254,  246,  254,  254,
      800,  248,  253,  255,  799,  255,  255,  797,  291,  252,
      256,  291,  256,  256,  257,  251,  257,  257,  254,  252,

      796,  256,  258,  253,  258,  258,  795,  794,  254,  255,
      793,  536,  792,  257,  536,  255,  259,  258,  259,  259,
      291,  260,  256,  260,  260,  791,  257,  261,  790,  261,
      261,  259,  789,  262,  258,  262,  262,  292,  261,  263,
      292,  263,  263,  264,  574,  264,  264,  574,  259,  788,
      260,  787,  261,  260,  265,  786,  265,  265,  536,  261,
      262,  263,  785,  718,  266,  262,  266,  266,  264,  292,
      267,  263,  267,  267,  268,  264,  268,  268,  717,  715,
      269,  265,  269,  269,  714,  712,  265,  270,  266,  270,
      270,  574,  271,  267,  271,  271,  266,  711,  270,  269,

      710,  708,  267,  707,  268,  272,  268,  272,  272,  706,
      705,  271,  269,  273,  704,  273,  273,  703,  700,  270,
      275,  698,  275,  275,  271,  273,  274,  697,  274,  274,
      276,  276,  276,  276,  696,  272,  695,  272,  278,  275,
      278,  278,  275,  274,  280,  273,  280,  280,  281,  694,
      281,  281,  275,  282,  282,  282,  282,  283,  274,  283,
      283,  284,  276,  284,  284,  285,  693,  285,  285,  287,
      278,  287,  287,  692,  278,  286,  280,  286,  286,  288,
      281,  288,  288,  283,  283,  282,  286,  690,  289,  283,
      289,  289,  287,  284,  284,  689,  290,  285,  290,  290,

      285,  287,  293,  293,  293,  293,  688,  286,  687,  686,
      685,  288,  287,  294,  294,  294,  294,  683,  288,  682,
      289,  296,  296,  296,  296,  681,  300,  680,  290,  300,
      299,  679,  289,  299,  293,  297,  297,  297,  297,  299,
      301,  302,  678,  301,  302,  294,  677,  305,  300,  303,
      305,  301,  303,  296,  304,  676,  306,  304,  300,  306,
      675,  307,  299,  302,  307,  304,  305,  308,  674,  673,
      308,  306,  301,  302,  310,  303,  307,  310,  672,  305,
      309,  303,  311,  309,  312,  311,  304,  312,  306,  671,
      670,  309,  313,  307,  314,  313,  308,  314,  669,  308,

      315,  310,  668,  315,  311,  309,  310,  316,  317,  312,
      316,  317,  309,  667,  311,  666,  312,  318,  314,  313,
      318,  665,  319,  315,  313,  319,  314,  317,  318,  664,
      320,  321,  315,  320,  321,  322,  663,  316,  322,  316,
      317,  319,  323,  321,  327,  323,  662,  327,  661,  318,
      660,  659,  322,  658,  319,  324,  324,  324,  324,  657,
      320,  323,  320,  321,  323,  656,  655,  322,  326,  326,
      326,  326,  654,  579,  323,  329,  327,  329,  329,  577,
      327,  330,  329,  330,  330,  576,  575,  324,  330,  331,
      331,  331,  331,  571,  570,  333,  331,  332,  333,  334,

      332,  335,  334,  336,  335,  337,  336,  329,  337,  569,
      568,  338,  335,  330,  338,  339,  567,  566,  339,  565,
      564,  331,  383,  332,  332,  383,  336,  333,  333,  332,
      563,  334,  562,  335,  334,  336,  561,  337,  340,  340,
      340,  340,  384,  338,  337,  384,  336,  339,  342,  342,
      342,  342,  560,  559,  383,  338,  343,  343,  343,  343,
      344,  558,  344,  344,  372,  372,  372,  372,  557,  390,
      340,  390,  390,  556,  384,  385,  385,  385,  385,  555,
      342,  386,  386,  386,  386,  388,  388,  388,  388,  554,
      553,  552,  344,  389,  389,  389,  389,  391,  391,  391,

      391,  390,  393,  393,  393,  393,  551,  385,  421,  421,
      421,  421,  550,  386,  549,  548,  547,  388,  428,  428,
      428,  428,  429,  429,  429,  429,  546,  545,  544,  391,
      430,  430,  430,  430,  432,  432,  432,  432,  540,  433,
      433,  433,  433,  435,  435,  435,  435,  436,  539,  436,
      436,  437,  538,  437,  437,  537,  534,  438,  436,  438,
      438,  439,  533,  439,  439,  441,  428,  441,  441,  532,
      429,  433,  531,  530,  440,  437,  440,  440,  430,  436,
      529,  474,  438,  437,  474,  528,  527,  441,  526,  438,
      439,  440,  442,  439,  442,  442,  443,  441,  443,  443,

      525,  444,  524,  444,  444,  474,  440,  443,  445,  578,
      445,  445,  578,  474,  523,  442,  444,  446,  522,  446,
      446,  521,  519,  447,  442,  447,  447,  448,  443,  448,
      448,  518,  449,  444,  449,  449,  445,  517,  448,  473,
      445,  446,  473,  516,  450,  449,  450,  450,  447,  446,
      473,  451,  448,  451,  451,  447,  578,  515,  452,  448,
      452,  452,  514,  513,  449,  450,  453,  512,  453,  453,
      511,  473,  454,  452,  454,  454,  450,  684,  453,  451,
      684,  510,  455,  451,  455,  455,  456,  454,  456,  456,
      452,  457,  509,  457,  457,  455,  508,  458,  453,  458,

      458,  427,  426,  459,  454,  459,  459,  457,  456,  460,
      425,  460,  460,  462,  455,  462,  462,  461,  456,  461,
      461,  424,  423,  457,  684,  458,  460,  420,  419,  458,
      461,  459,  418,  417,  416,  459,  463,  463,  463,  463,
      465,  460,  465,  465,  716,  462,  462,  716,  415,  461,
      464,  464,  464,  464,  466,  414,  466,  466,  467,  413,
      467,  467,  468,  475,  468,  468,  475,  469,  463,  469,
      469,  412,  465,  470,  470,  470,  470,  472,  472,  472,
      472,  411,  464,  410,  467,  409,  466,  465,  475,  476,
      467,  716,  476,  466,  468,  475,  408,  407,  477,  469,

      468,  477,  405,  478,  404,  470,  478,  469,  479,  480,
      403,  479,  480,  481,  482,  477,  481,  482,  476,  483,
      480,  476,  483,  484,  486,  478,  484,  486,  481,  487,
      477,  479,  487,  485,  402,  478,  485,  486,  401,  400,
      479,  480,  482,  483,  485,  481,  482,  399,  484,  488,
      487,  483,  488,  398,  489,  484,  486,  489,  485,  490,
      491,  487,  490,  491,  397,  485,  396,  492,  395,  489,
      492,  490,  394,  493,  382,  491,  493,  488,  381,  379,
      492,  488,  494,  378,  495,  494,  489,  495,  377,  374,
      496,  490,  491,  496,  497,  493,  370,  497,  494,  492,

      498,  499,  369,  498,  499,  493,  501,  501,  501,  501,
      368,  497,  495,  498,  494,  367,  495,  503,  496,  366,
      503,  365,  496,  364,  504,  363,  497,  504,  500,  500,
      500,  500,  498,  499,  499,  500,  502,  502,  502,  502,
      505,  506,  507,  505,  506,  507,  362,  361,  360,  503,
      535,  535,  535,  535,  359,  358,  504,  356,  355,  354,
      500,  353,  927,  504,  503,  927,  505,  971,  502,  352,
      971,  351,  505,  506,  507,  541,  541,  541,  541,  506,
      350,  349,  507,  543,  543,  543,  543,  572,  572,  572,
      572,  580,  580,  580,  580,  582,  582,  582,  582,  583,

      583,  583,  583,  585,  585,  585,  585,  541,  586,  927,
      586,  586,  348,  587,  971,  587,  587,  347,  588,  241,
      588,  588,  237,  234,  980,  586,  587,  980,  589,  982,
      589,  589,  982,  590,  233,  590,  590,  231,  230,  580,
      586,  591,  228,  591,  591,  587,  589,  583,  588,  592,
      588,  592,  592,  223,  219,  593,  591,  593,  593,  592,
      589,  590,  218,  216,  215,  590,  594,  214,  594,  594,
      211,  980,  595,  591,  595,  595,  982,  596,  209,  596,
      596,  592,  208,  598,  593,  598,  598,  593,  597,  594,
      597,  597,  599,  595,  599,  599,  620,  204,  594,  620,

      598,  202,  201,  200,  595,  596,  199,  198,  600,  596,
      600,  600,  197,  620,  597,  598,  601,  599,  601,  601,
      597,  196,  195,  602,  599,  602,  602,  194,  620,  600,
      193,  601,  603,  602,  603,  603,  605,  192,  605,  605,
      600,  604,  603,  604,  604,  191,  190,  606,  601,  606,
      606,  607,  188,  607,  607,  602,  608,  187,  608,  608,
      605,  186,  606,  185,  603,  184,  607,  183,  605,  604,
      182,  181,  608,  604,  609,  180,  609,  609,  611,  606,
      611,  611,  610,  607,  610,  610,  179,  612,  608,  612,
      612,  613,  610,  613,  613,  168,  611,  614,  614,  614,

      614,  167,  615,  609,  615,  615,  609,  164,  623,  162,
      611,  623,  612,  616,  610,  616,  616,  161,  617,  612,
      617,  617,  618,  613,  618,  618,  623,  159,  158,  614,
      619,  157,  619,  619,  615,  621,  613,  152,  621,  622,
      623,  150,  622,  625,  624,  616,  625,  624,  621,  615,
      617,  148,  627,  146,  618,  627,  618,  145,  625,   71,
      616,  629,  619,  617,  629,  628,   68,  621,  628,  622,
      626,  622,  624,  626,   66,  625,  624,  619,   64,   62,
      626,  627,  629,  630,  627,   59,  630,  631,  628,  632,
      631,  633,  632,  629,  633,  635,  634,  628,  635,  634,

       54,   51,  626,   48,  636,  638,  632,  636,  638,  640,
      635,  630,  640,  631,  636,  630,  633,  634,   47,  631,
       42,  632,  637,  633,  640,  637,  639,  635,  634,  639,
       41,  641,  637,  638,  641,  642,  636,  638,  642,  643,
      646,  640,  643,  646,  645,  644,  641,  645,  644,  647,
      639,  642,  647,   40,  637,  644,  649,  650,  639,  649,
      650,  651,  645,  641,  651,  646,  652,  642,  643,  652,
      653,  643,  646,  653,   38, 1008,  645,  644, 1008,   37,
       36,  647,  648,  648,  648,  648,   31,  755,  649,  650,
      755,   29,   27,  651,  647,   25, 1015,  755,  652, 1015,

      652,   23,  653,  649,  650,  719,  651,  719,  719,  720,
       21,  720,  720,  721,  648,  721,  721,  653,  722,  755,
      722,  722, 1008,  725,  720,  725,  725,   17,  722,  723,
        0,  723,  723,  719,    0,    0,    0,  719,    0,  723,
      721,  720,    0, 1015,  724,  721,  724,  724,    0,  726,
      722,  726,  726,    0,  724,  725,    0,    0,    0,  726,
      727,  723,  727,  727,  728,    0,  728,  728,    0,  729,
      727,  729,  729,    0,  728,  730,  724,  730,  730,  729,
      731,  726,  731,  731,  732,  730,  732,  732,    0,    0,
        0,  733,  727,  733,  733,  734,  728,  734,  734,    0,

      735,  729,  735,  735,  733,    0,    0,  730,  731,    0,
        0,  732,  731,    0,    0,  736,  732,  736,  736,    0,
      733,  753,  734,  733,  753,    0,  737,  734,  737,  737,
        0,  738,  735,  738,  738,  739,  753,  739,  739,  740,
      758,  740,  740,  758,    0,  739,    0,  736,  741,  740,
      741,  741,    0,  753,  742,  737,  742,  742,  737,  743,
      738,  743,  743,  738,  742,    0,  744,  739,  744,  744,
      741,  740,  758,  745,    0,  745,  745,    0,    0,  746,
      741,  746,  746,    0,    0,  747,  742,  747,  747,    0,
      748,  743,  748,  748,    0,  744,  745,  749,  744,  749,

      749,  750,    0,  750,  750,  745,  751,  752,  751,  751,
      752,  746,    0,  754,    0,    0,  754,  747,  746,    0,
        0,    0,  748,    0,  748,    0,    0,    0,    0,  749,
      749,  756,    0,  750,  756,  752,    0,    0,  751,  752,
      754,  756,    0,    0,  757,  754,  759,  757,  750,  759,
        0,    0,  760,  751,  757,  760,  759,  761,  762,    0,
      761,  762,  760,  756,    0,    0,    0,  761,  762,  763,
      764,  768,  763,  764,  768,    0,  757,  765,  759,  763,
      765,    0,  766,  767,  760,  766,  767,    0,  769,  761,
      762,  769,    0,  770,  771,  766,  770,  771,  764,    0,

        0,  763,  764,  768,  765,  776,    0,    0,  776,  765,
      767,  766,    0,  774,  766,  767,  774,    0,  772,    0,
      769,  772,  770,  771,  773,  770,  771,  773,  772,  775,
      777,    0,  775,  777,  773,  774,    0,  776,  779,  775,
      778,  779,    0,  778,  780,  774,  781,  780,    0,  781,
      772,  782,    0,    0,  782,  783,  773,  784,  783,  777,
      784,  775,  777,  778,  840,    0,  840,  840,    0,    0,
      779,    0,  778,    0,  840,    0,  780,  779,  781,  843,
      781,  843,  843,  782,  782,    0,    0,  783,  841,  784,
      841,  841,  844,    0,  844,  844,  840,  842,  841,  842,

      842,    0,  783,  845,  784,  845,  845,  842,    0,    0,
      846,  843,  846,  846,  847,    0,  847,  847,    0,  848,
      841,  848,  848,  849,  844,  849,  849,    0,  850,  842,
      850,  850,    0,    0,  851,  845,  851,  851,  853,    0,
      853,  853,  846,    0,  851,  852,  847,  852,  852,    0,
      854,  848,  854,  854,  855,  849,  855,  855,  852,  858,
      850,  858,  858,  853,  855,  856,  851,  856,  856,  854,
      853,    0,    0,  868,  852,  856,  868,  852,  857,    0,
      857,  857,  854,  868,    0,    0,  855,  859,  857,  859,
      859,  858,  860,    0,  860,  860,  861,  856,  861,  861,

        0,  862,    0,  862,  862,  868,  863,  860,  863,  863,
      857,  862,  864,  871,  864,  864,  871,    0,    0,  859,
      865,  863,  865,  865,  860,    0,    0,  866,  861,  866,
      866,    0,  867,  862,  867,  867,  869,  870,  863,  869,
      870,    0,    0,    0,  864,  871,  869,  870,  872,    0,
      873,  872,  865,  873,  874,  865,  864,  874,  875,  866,
      876,  875,  877,  876,  867,  877,    0,  878,  869,  870,
      878,  866,  880,  879,  882,  880,  879,  882,  881,    0,
      872,  881,  873,  879,  886,  880,  874,  886,  883,    0,
      875,  883,  876,  882,  877,    0,    0,  884,  883,  878,

      884,  880,    0,  881,  880,  879,  882,  884,  885,  887,
      881,  885,  887,    0,  889,    0,  886,  889,  885,  888,
      883,  890,  888,  891,  890,  892,  891,  893,  892,  884,
      893,  890,  894,  895,  888,  894,  895,    0,  891,    0,
      885,  887,  930,    0,  930,  930,  889,  931,    0,  931,
      931,  888,    0,  890,    0,  891,    0,  892,  932,  893,
      932,  932,  893,    0,  894,  895,    0,    0,  933,  892,
      933,  933,    0,    0,  930,    0,  894,    0,  934,  931,
      934,  934,  935,    0,  935,  935,  936,    0,  936,  936,
      932,  937,    0,  937,  937,  938,    0,  938,  938,    0,

      933,  935,  939,  934,  939,  939,    0,    0,  936,  940,
      934,  940,  940,  937,  935,    0,    0,  947,  936,  941,
      947,  941,  941,  937,    0,    0,    0,  938,  942,  941,
      942,  942,    0,  943,  939,  943,  943,  944,    0,  944,
      944,  940,    0,  943,  945,  944,  945,  945,    0,  947,
      946,  941,  946,  946,  948,  949,  950,  948,  949,  950,
      942,    0,    0,  955,  951,  943,  955,  951,    0,  944,
      953,  952,  954,  953,  952,  954,  945,  956,  957,    0,
      956,  957,  946,    0,    0,  946,  948,  949,  950,  951,
      952,  945,  953,    0,  954,  955,  951,  958,  959,    0,

      958,  959,  953,  952,  954,  960,    0,  958,  960,  956,
      957,  961,    0,  962,  961,  960,  962,  963,    0,  961,
      963,    0,  983,    0,  983,  983,    0,    0,    0,  958,
      959,  984,    0,  984,  984,    0,  985,  960,  985,  985,
        0,    0,    0,  961,  983,  962,  985,    0,  987,  963,
      987,  987,  963,  984,  983,  986,    0,  986,  986,  988,
      962,  988,  988,  984,  989,    0,  989,  989,  985,  990,
      986,  990,  990,  991,  995,  991,  991,  995,    0,  992,
      987,  992,  992,    0,  995,  993,  994,  986,  993,  994,
      997,  988,  998,  997,    0,  998,  989,  996,  989,  999,

      996,  990,  999,    0,    0,  991,  995,  993,  994,    0,
     1000,  992,  996, 1000,    0,    0,  990,  993,  994,    0,
      991,    0,  997,    0,  998,    0,  992, 1001,    0,  996,
     1001,  999, 1002,  999, 1017, 1002, 1017, 1017, 1018,    0,
     1018, 1018, 1000, 1019, 1017, 1019, 1019,    0, 1020,    0,
     1020, 1020, 1021, 1018, 1021, 1021,    0, 1000, 1020, 1001,
     1022,    0, 1022, 1022, 1002, 1023, 1017, 1023, 1023, 1024,
     1018, 1024, 1024, 1025, 1001, 1019, 1025,    0, 1026, 1002,
     1020, 1026, 1027, 1025, 1021, 1027, 1028, 1021, 1029, 1028,
        0, 1029, 1022, 1026,    0, 1030, 1028, 1023, 1030, 1031,

     1032, 1024, 1031, 1032, 1042, 1025, 1042, 1042, 1047,    0,
     1026, 1047, 1023,    0, 1027,    0, 1024,    0, 1028, 1043,
     1029, 1043, 1043, 1029,    0, 1049,    0, 1030, 1049, 1043,
     1051, 1031, 1032, 1051,    0, 1044, 1042, 1044, 1044, 1045,
     1047, 1045, 1045,    0,    0, 1048, 1031, 1032, 1048,    0,
     1046, 1043, 1046, 1046,    0, 1048, 1050, 1049, 1056, 1050,
     1056, 1056, 1051, 1057,    0, 1057, 1057, 1044,    0, 1058,
     1059, 1045, 1058, 1059,    0,    0, 1062, 1048, 1062, 1062,
     1045,    0, 1046, 1063, 1067,    0, 1063, 1067, 1050, 1066,
     1056, 1066, 1066, 1071, 1067, 1057, 1071, 1050,    0, 1066,

        0, 1058, 1059, 1070,    0, 1070, 1070, 1057, 1062,    0,
        0,    0,    0, 1062, 1059, 1063, 1067,    0,    0,    0,
     1063, 1066,    0,    0,    0, 1071,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1070, 1073, 1073, 1073, 1073,
     1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075,
     1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076, 1076,
     1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078,    0, 1078,
     1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1080,    0,
        0,    0, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081,
     1082, 1082,    0,    0, 1082, 1082, 1083, 1083, 1083, 1083,

     1083, 1083, 1084, 1084,    0, 1084, 1084, 1084, 1085, 1085,
        0, 1085, 1085, 1085, 1086, 1086,    0,    0,    0, 1086,
     1087, 1087,    0, 1087, 1087, 1087, 1089, 1089,    0,    0,
        0, 1089, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[81] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1738 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1933 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1073 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1072 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
return COLON;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
return PERC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
;
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 278 "levcomp.lpp"
;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2487 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1073 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1073 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1072);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 282 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}
