#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1138] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,   82,   79,   80,
       81,   77,   82,   75,   78,   76,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   79,   34,   36,   82,   82,   82,   82,   82,
       82,   83,    6,   83,   83,    4,    2,    3,   83,    2,
        2,    2,    2,    9,   10,   83,    9,    9,   83,   12,
       83,   32,   79,   33,   81,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   79,   32,   32,

       32,   32,   32,   32,   32,   32,   82,   28,   23,   28,
       77,   82,   27,   78,   76,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   28,   34,   36,   82,   82,   82,   82,   82,
       82,   15,   16,   81,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   82,   13,   15,   13,   13,   13,   13,   13,
       83,   21,   22,   83,   20,   83,   79,   80,   78,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   79,   34,   36,    0,
        0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,   39,    6,    5,    0,    0,    2,    3,    2,    0,
        2,    2,    2,    2,    9,    9,   10,    9,    9,    9,
        0,   11,    0,   12,   31,    0,   31,   79,   33,    0,
        0,   33,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       30,   31,   79,   31,   34,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,

        0,   23,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,    0,
       25,    0,   26,   28,   26,   34,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   15,   16,    0,    0,    0,
       16,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       19,    0,   19,   21,   22,    0,    0,    0,    0,   18,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    9,    9,    9,
        7,    0,    0,   29,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   34,   31,   31,   31,   31,   31,
       31,    0,   24,    0,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   34,   34,   26,   26,   26,   26,   26,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   35,    0,    0,    0,    0,    0,    2,    9,    8,

        0,    9,    7,    0,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,    0,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,    0,    0,   26,   26,   26,   26,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,    0,   66,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
       42,    0,    0,    0,    0,    0,    0,    0,   51,   63,
        0,    0,    0,   38,    0,    0,    0,    0,    2,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,    0,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,    0,
       26,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
        0,    0,   44,    0,   50,   61,   69,   70,   72,   71,
       73,    0,    0,    0,    0,    0,    0,    0,   46,   62,
        0,   54,    0,    0,    0,    0,    0,    0,   41,    1,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   53,   48,
       56,    0,   52,    0,    0,    0,    0,   67,   55,   45,
        0,    0,   49,    0,    0,    0,    0,    1,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   64,    0,    0,
        0,    0,   68,    0,   47,    0,    0,    0,    0,   31,
       31,   31,   31,   31,   31,   31,   31,   31,    0,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   26,   26,   13,   13,   13,   13,   13,   13,   13,
        0,    0,   58,    0,   74,    0,   37,    0,    0,   31,
       31,   31,   31,   31,   31,   31,    0,   31,   26,   26,
       26,   26,   26,   26,   26,    0,   26,   13,   13,   13,

       13,   57,    0,   60,    0,   40,   31,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   13,   13,   59,    0,
       31,   31,   26,   26,   13,    0,   31,   26,   13,    0,
       31,   26,   13,   43,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    9,   10,    1,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   22,   22,   22,
        1,   35,    1,    1,   22,    1,   36,   22,   22,   37,

       38,   39,   22,   40,   41,   22,   22,   42,   22,   22,
       43,   44,   22,   45,   46,   47,   48,   49,   22,   22,
       22,   22,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    5,    6,
        6,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[1155] =
    {   0,
        0,   50,   54,   61,   65,   67,   50,   69,  118,  168,
      218,  268,  318,  368,   77,  173, 2558, 3712,   72, 3712,
     2549, 3712, 2540, 3712, 2530, 3712, 2522,   56, 2522,   64,
     2505,   80,   73,   76,   74, 2498, 2502, 2487,   65,   93,
     2498, 2475,  417,    0, 3712,  158, 2460, 2453,  154,   79,
     2446, 3712, 3712, 2492,  183, 3712,    0, 3712, 2489,  187,
        0, 2456,   44, 2416, 3712, 2463,  148, 2414,  106, 3712,
     2451,  273,  280, 3712,  373,  380,  385,  390,  395,  399,
      422,  433,  437,  445,  469,  503,  477,  483,  509,  488,
      525,  530,  538,  543,  549,  572,  567,  577,  581,  585,

      590,  594,  604,  609,  622,  617,  274,  628, 3712,  633,
      381,  643, 3712,  645,  386,  481,  443,  657,  641,  664,
      668,  679,  677,  689,  696,  683,  704,  708,  721,  715,
      742,  725,  749,  753,  731,  759,  763,  736,  768,  774,
      773,  787, 3712,  797, 2441, 2440,    0, 2423,  175, 2420,
      185, 2402,  269,  154,  171,  183, 2403, 2405, 2397,  183,
      268, 2408,  296, 2379,  802,  184, 2362, 2362,  246,  168,
      778,  813, 3712,  822, 3712,  826,  286, 3712, 2395, 2375,
     2382, 2370, 2363, 2369, 2370, 2356, 2352, 2351, 2332,  259,
     2331, 2332, 2328, 2325, 2310, 2305, 2281, 2291, 2298, 2281,

     2244, 2254, 2248, 2239,  281, 2217,    0,    0, 3712, 2199,
     2201,  268, 2182,    0,  267, 2182, 2179, 2203,  356, 2165,
     2156, 3712, 3712, 3712, 2190,  428,    0, 3712,    0, 2189,
      498, 2171, 2160,  390, 2128, 2122, 3712,  265, 2121,  831,
      368, 3712, 2168, 3712,  836,  840,  848,  860, 3712,  864,
      874, 3712,  882,  868,  892,  886,  896,  902,  907,  911,
      921,  931,  854,  945,  939,  949,  955,  959,  965,  973,
      981,  991,  997, 1001, 1013, 1019, 1023, 1033, 1039, 1047,
     3712, 1051,    0, 1057, 1062, 1067, 1071, 1075, 1079, 1083,
     1099, 1111, 1103, 1117,  974, 1093, 1127, 1137, 3712, 1152,

     1156, 3712, 1162, 1142, 1163, 1146, 1173, 1169, 1177, 1178,
     1183, 1189, 1190, 1209, 1191, 1205, 1200, 1214, 1226, 1228,
     1232, 1236, 1237, 1249, 1243, 1254, 1260, 1253, 1278, 1288,
     3712, 1301, 1280,    0, 1292, 1305, 1326, 1315, 1306, 1316,
     1320, 1332, 1334, 1344, 1351, 1360, 3712, 1368, 1378, 1383,
     3712,    0, 2156, 2139, 2142, 2130, 2121, 2128, 2125, 2113,
     2116, 2109, 2094,  431, 2091, 2095, 2083, 2075, 2061, 2061,
     2053, 2059, 2066, 2050, 2023, 2037, 2028, 2022,  422, 1394,
     3712, 1998,    0,  423, 1996, 1987, 2008,  431, 1970, 1957,
     1372, 1387, 1406, 1410, 3712, 1421, 1425, 1400, 1429, 3712,

     1434, 1981, 1967, 1963, 1956, 1959, 1960, 1954, 1949, 1957,
     1943, 1926, 1914, 1907,  462, 1918, 1894, 1869, 1881, 1871,
     1867, 1861, 1844, 1845,  461, 1824, 1835, 1830, 1830, 1807,
     1444,  550, 1791, 1801, 1785, 1782, 1794, 1448, 1455, 1463,
     3712, 1467, 1472, 3712, 1476, 1480, 1484, 1490, 1496, 1500,
     1507, 1438, 1518, 1528, 1532, 1542, 1550, 1546, 1555, 1560,
     1582, 1589, 1594, 1598, 1604, 1611, 1618, 1623, 1630, 1643,
     1647, 1652, 1657, 1664, 1672, 1681, 1686, 1691, 1699, 1704,
     1708, 1715, 3712, 1720, 1605, 1709, 1726, 1727, 1735, 1569,
     1736, 1744, 1750, 1763, 1752, 1762, 1772, 1773, 1779, 1787,

     1771, 1788, 1807, 1811, 1815, 1813, 1822, 1829, 1830, 1834,
     1836, 1851, 1842, 1870, 1878, 1885, 1856, 1865, 1890, 1891,
     1892, 1798, 1778, 1776, 1771, 1775, 1776, 1767, 1758, 1759,
     1749, 1729, 1722, 1720,  471, 1715, 1682, 1672, 1681, 1675,
     1664, 1665, 1655, 1637,  503, 1620, 1627, 1624, 1623, 1600,
     1899, 1343, 1589, 1602, 1560, 1554, 1906, 3712, 1910, 1564,
     1565, 1547, 1558, 1551, 1528, 1539, 1533, 1509, 1514, 1515,
     1499, 1500, 1505, 1491, 1485, 1486, 1485, 1484, 1461, 1464,
     1470, 1466, 1445, 1430, 1442, 1442, 1432, 1401, 1393, 1371,
     1919, 3712, 1511, 1367, 1368, 1369, 1564, 1388, 1926, 3712,

     1934, 1940, 3712, 1944, 1948, 1953, 1957, 1961, 1967, 1971,
     1980, 2005, 2014, 2009, 2018, 2022, 2026, 2031, 2054, 2060,
     2065, 2072, 2086, 2092, 2097, 2101, 2107, 2111, 2126, 2135,
     2139, 2148, 2160, 2154, 2164, 2173, 2180, 2186, 2192, 2196,
     2200, 2073, 2058, 2209, 2204, 2218, 2208, 2217, 2243, 2037,
     2224, 2112, 2249, 2255, 2223, 2259, 2264, 2260, 2268, 2269,
     2270, 2003, 2280, 2291, 2296, 2286, 2305, 2304, 2317, 2318,
     2322, 2323, 2330, 2339, 2340, 2345, 2341, 2346, 1381, 1379,
     1358, 1364, 1356, 1338, 1349, 1348, 1328, 1333, 1329, 1317,
     1310, 1313, 1299, 1301, 1299, 1300, 1288, 1268, 1261, 1269,

     1264, 1258, 1243, 1260, 1257, 1254, 1240, 1220, 1198, 1184,
     1186, 1587, 1187, 1198, 1180, 1191, 1169, 1172, 1157, 3712,
     1151, 1137, 1131, 1125, 1124, 1105, 1104,  494, 1098, 3712,
     3712, 1095, 1094, 1111, 1108, 1088, 1097, 1062, 3712, 3712,
     1062, 1066, 1047, 3712, 1041, 1029, 1665,  997, 1018, 2357,
     2362, 2380, 2396, 2368, 2400, 2409, 2414, 2418, 2422, 2434,
     2438, 2443, 2454, 2458, 2466, 2470, 2475, 2481, 2486, 2498,
     2502, 2507, 2520, 2526, 2530, 2541, 2545, 2552, 2564, 2568,
     2573, 2577, 2586, 2590, 2596, 2518, 2459, 2591, 2562, 2604,
     2625, 2630, 2613, 2631, 2639, 2645, 2647, 2651, 2653, 2662,

     2670, 2671, 2676, 2682, 2687, 2688, 2697, 2702, 2710, 2708,
     2693, 2719, 2724, 2725, 2733, 2731, 2737, 2739, 2744, 2746,
     2748, 1010, 1022, 1005, 1019, 1010, 1017, 1008, 1007, 1002,
      999,  995,  992,  967,  963,  526,  960,  956,  950,  959,
      953,  938,  943,  920,  914,  915,  897,  897,  894,  917,
      916,  910, 3712,  887, 3712, 3712, 3712, 3712, 3712, 3712,
     3712,  902,  531,  881,  881,  869,  868,  862, 3712, 3712,
      843, 3712,  831,  842,  832,  800,  808,  796, 3712,  834,
     2759, 2765, 2780, 2784, 2797, 2801, 2805, 2809, 2816, 2820,
     2825, 2829, 2833, 2844, 2861, 2837, 2865, 2869, 2878, 2852,

     2887, 2893, 2897, 2901, 2907, 2912, 2916, 2922, 2929, 2933,
     2938, 2943, 2944, 2760, 2773, 2788, 2939, 2956, 2957, 2964,
     2965, 2970, 2975, 2980, 2979, 2981, 2991, 2992, 2996, 3007,
     3015, 3016, 3017, 3023, 3027, 3032, 3033, 3038, 3039, 3043,
      809,  808,  807,  766,  784,  573,  768,  766,  773,  770,
      762,  752,  743,  747,  732,  701,  699,  682, 3712, 3712,
     3712,  710, 3712,  694,  695,  691,  687, 3712, 3712, 3712,
      693,  669, 3712,  675,  673, 1692,  639,  670, 3052, 3059,
     3067, 3077, 3086, 3091, 3095, 3099, 3103, 3109, 3115, 3120,
     3127, 3138, 3131, 3144, 3149, 3156, 3163, 3169, 3170, 3175,

     3176, 3180, 3181, 3188, 3190, 3194, 3192, 3198, 3215, 3219,
     3217, 3230, 3232, 3236, 3234, 3238,  659,  637,  632,  627,
      617,  628,  597,  611,  608, 1914,  577, 3712,  586,  577,
      585,  576, 3712,  579, 3712,  531, 1949,  517, 1993, 3251,
     3255, 3259, 3270, 3276, 3283, 3287, 3293, 3298, 3302, 3308,
     3312, 3318, 3322, 3324, 3329, 3334, 3340, 3358, 3363, 3369,
     3374, 3375, 3376,  539,  535,  538,  520,  514,  483, 1998,
      507,  498, 3712,  485, 3712,  426, 3712, 2287,  412, 3380,
     3384, 3392, 3416, 3398, 3403, 3412, 3427, 3432, 3437, 3438,
     3443, 3448, 3452, 3454, 3456, 3461, 3463,  443,  411,  401,

      373, 3712,  397, 3712,  361, 3712, 3495, 3500, 3504, 3512,
     3516, 3488, 3517, 3505, 3522, 3523,  386,  335, 3712,  266,
     3529, 3539, 3540, 3544,  260,  263, 3557, 3548,  167,  189,
     3565, 3566,  169, 3712, 3580, 3558, 3712, 3615, 3621, 3627,
     3633, 3639, 3645, 3651, 3657, 3663, 3669, 3675, 3681, 3687,
     3693, 3699,   87, 3705
    } ;

static yyconst flex_int16_t yy_def[1155] =
    {   0,
     1137,    1, 1138, 1139, 1140, 1140, 1141, 1141, 1137,    9,
     1137,   11, 1137,   13, 1142, 1142, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1143, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1144, 1137, 1145, 1137, 1137, 1146,
     1145, 1145, 1145, 1147, 1137, 1137, 1147, 1147, 1148, 1137,
     1137, 1149, 1137, 1137, 1137, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149,   43, 1150, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1151, 1137, 1137, 1137,
     1151, 1151, 1137, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151,   43, 1152, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1137, 1137, 1137, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1137, 1153,   43, 1153, 1153, 1153, 1153, 1153,
     1154, 1137, 1137, 1137, 1137, 1154, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137,   43, 1143, 1137, 1137,
     1137, 1137, 1137, 1143, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1145, 1137, 1145, 1137,
     1145, 1145, 1145, 1145, 1147, 1147, 1137, 1147, 1147, 1147,
     1148, 1137, 1137, 1137, 1149, 1149, 1149, 1137, 1137, 1137,
     1137, 1137, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1137, 1149,   98, 1150, 1150, 1150, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1151, 1151, 1151, 1137, 1137, 1137,

     1137, 1137, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1137, 1137, 1151,  133, 1152, 1152, 1152, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1137, 1137, 1137, 1137, 1137,
     1137, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1137,
     1137, 1153,  165, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1154, 1154, 1154, 1137, 1137, 1137, 1137, 1137, 1154, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1145, 1147, 1147, 1147,
     1137, 1137, 1149, 1137, 1137, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1150, 1149, 1149, 1149, 1149, 1149,
     1149, 1151, 1137, 1137, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1152, 1143, 1151, 1151, 1151, 1151, 1151,
     1151, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1154, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1145, 1147, 1137,

     1137, 1147, 1137, 1137, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1145, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1145,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1145, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1151, 1151, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1153, 1153, 1153,

     1153, 1137, 1137, 1137, 1137, 1137, 1149, 1149, 1149, 1149,
     1149, 1151, 1151, 1151, 1151, 1151, 1153, 1153, 1137, 1137,
     1149, 1149, 1151, 1151, 1153, 1137, 1149, 1151, 1153, 1137,
     1149, 1151, 1153, 1137, 1149, 1151,    0, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137
    } ;

static yyconst flex_int16_t yy_nxt[3764] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   24,   23,
       25,   26,   18,   27,   28,   29,   18,   30,   18,   18,
       31,   18,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   18,   18,   41,   18,   18,   42,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   43,   70,   71,   43,   44,   53,   54,   55,   56,
      233,   45,   52,   58,   59,   60,   61,   65,   66,   65,
       66,   70,   71,  177,   46,  181,  177,   62,  172,  173,
      174,  172,  182,  184,  201,  175,  196,  185,  194,  234,
      192,   47,  352,   48,  186,   49,  202,  188,   50,   51,

      189,  193,  195,  197,  190,  203,   63,  191,  242,  243,
       67,  176,   67,  204,  220,   68,  221,   68,   72,   73,
       74,   75,   73,   72,   76,   77,   78,   77,   79,   80,
       72,   81,   82,   83,   72,   84,   72,   72,   85,   72,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   72,
       72,   95,   96,   72,   97,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   98,
      215,  366,   98,   99,  172,  173,  174,  172,  218,  100,
     1134,  175,  367,  368,  195,  223,  225,  226,  224,  228,
      230,  231,  101,  238,  355,  370,  384,  369,  239,  219,

     1134,  356,  375,  389,  358,  390, 1133,  176,  359,  102,
      369,  103,  371,  104,  376,  360,  105,  106,  107,  108,
      109,  110,  108,  107,  111,  112,  113,  112,  114,  115,
      107,  116,  117,  118,  107,  119,  107,  107,  120,  107,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  107,
      107,  130,  131,  107,  132,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  133,
      387,  412,  133,  134,  246,  296,  246,  246,  296,  135,
      377,  248,  249,  250,  248,  413,  362,  177,  378,  363,
      177,  388,  136,  364,  431,  417,  365,  380,  381,  380,

      380,  428, 1130,  220,  429,  221, 1129,  247,  297,  137,
      238,  138, 1126,  139,  251,  239,  140,  141,   18,  142,
      143,  144,  142,   18,   22,   23,   24,  145,  146,   26,
      147,  148,  149,  150,  147,  151,  147,  147,  152,  147,
      153,  154,  155,  156,  157,  158,  159,  160,  161,  147,
      147,  162,  163,  147,  164,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,   18,   18,  165,
      242,  243,  165,   44,  250,  252,  250,  250, 1125,   45,
      218,  246,  296,  246,  246,  296,  246,  296,  246,  246,
      296,  246,  166,  246,  246,  253,  246, 1119,  246,  246,

      246,  219,  246,  246, 1120,  253,  233,  251, 1119,  167,
     1118,  168, 1104,  169,  247,  297,  170,   51,  207,  247,
      297,  207,  208,  246,  247,  246,  246, 1117,  209,  247,
      223,  225,  226,  247,  246,  234,  246,  246,  246,  254,
      246,  246,  548,  532,  296,  549,  246,  296,  246,  246,
      551,  537,  255,  257, 1102,  387,  247,  533,  210,  256,
      211, 1106,  305, 1105,  258,  212,  213,  247,  259,  306,
      246,  247,  246,  246,  573,  260,  388,  297,  246,  247,
      246,  246,  296,  692,  246,  296,  246,  246,  574,  246,
      584,  246,  246,  585,  266,  268, 1104,  693,  304,  261,

      228,  230,  231,  247,  246,  267,  246,  246,  864,  269,
      246,  247,  246,  246, 1103,  297,  272,  247, 1102, 1101,
      262,  270,  247,  263,  865, 1075,  246,  264,  246,  246,
      265,  246,  703,  246,  246,  704, 1100,  247,  271,  246,
      947,  246,  246,  247,  246,  964,  246,  246,  273, 1073,
      246,  593,  246,  246,  593,  277,  948,  275, 1099,  247,
      274,  965, 1098,  278,  247,  279, 1077, 1076,  246,  276,
      246,  246,  247,  280,  281,  280,  280,  247,  283,  249,
      250,  283,  285,  247,  285,  285,  246, 1018,  246,  246,
     1075,  246, 1074,  246,  246,  246, 1073,  246,  246,  594,

     1072,  247,  287, 1019,  282,  246,  247,  246,  246, 1071,
      246,  251,  246,  246, 1070,  286,  269, 1069,  246,  247,
      246,  246, 1035,  246,  247,  246,  246, 1068,  247,  298,
      299,  300,  298,  290,  300,  302,  300,  300,  247, 1033,
     1067,  288,  296,  247,  296,  296,  296,  296,  289,  296,
     1066,  247, 1065,  303,  291,  303,  247,  292,  296,  293,
      308,  296,  301, 1064,  309,  296,  294,  301,  296,  296,
     1028,  310,  296,  307,  978,  297, 1039,  297,  296,  297,
      296,  296, 1036,  296,  296,  312, 1035,  296,  313,  318,
      296,  297,  314,  296,  311,  315,  316,  296,  297, 1034,

      296,  320,  297,  319, 1033,  296,  323,  317,  296,  296,
     1032,  297,  296,  297, 1031, 1030,  296,  297,  321,  296,
     1029, 1028,  296,  297,  322,  296,  296,  325, 1027,  296,
      297,  329,  296,  327,  324,  296, 1026,  296,  297,  326,
      296,  328,  297,  330,  331,  332,  330, 1025, 1024,  297,
      334,  299,  300,  334,  336,  297,  214,  336,  973,  297,
      296,  214,  333,  296,  296,  297, 1023,  296, 1022,  296,
      297,  338,  296,  970,  296,  296,  297,  296,  296,  392,
      340,  969,  392,  301,  968,  319, 1021,  337,  346,  347,
      348,  346,  341,  297, 1020,  963, 1017,  297,  350,  351,

      350,  350,  297,  383,  347,  348,  383,  297,  297,  343,
      339,  344,  393,  342,  394,  395,  396,  394,  961,  960,
      959,  349,  345,  398,  395,  398,  398,  399,  400,  401,
      399,  349,  440,  441,  442,  440,  349,  246,  978,  246,
      246,  246,  977,  246,  246,  976,  975,  397,  974,  443,
      444,  443,  443,  973,  972,  246,  397,  246,  246,  971,
      393,  248,  249,  250,  248,  250,  249,  250,  250,  246,
      247,  246,  246,  970,  247,  445,  281,  445,  445,  969,
      968,  438,  247,  246,  455,  246,  246,  246,  247,  246,
      246,  446,  253,  246,  251,  246,  246,  246,  251,  246,

      246,  967,  247,  246,  447,  246,  246,  966,  246,  448,
      246,  246,  246,  963,  246,  246,  247,  962,  450,  451,
      247,  961,  246,  449,  246,  246,  247,  960,  959,  958,
      247,  452,  246,  957,  246,  246,  247,  453,  956,  955,
      246,  247,  246,  246,  954,  247,  246,  454,  246,  246,
      246,  953,  246,  246,  872,  247,  246,  456,  246,  246,
      246,  952,  246,  246,  870,  247,  246,  458,  246,  246,
      869,  457,  459,  247,  246,  296,  246,  246,  296,  247,
      951,  460,  246,  247,  246,  246,  950,  461,  949,  247,
      462,  946,  246,  247,  246,  246,  945,  463,  246,  247,

      246,  246,  246,  861,  246,  246,  860,  247,  297,  466,
      859,  465,  464,  858,  246,  247,  246,  246,  857,  856,
      246,  467,  246,  246,  246,  247,  246,  246,  855,  944,
      853,  247,  469,  943,  246,  247,  246,  246,  942,  941,
      246,  470,  246,  246,  468,  880,  879,  247,  280,  281,
      280,  280,  246,  247,  246,  246,  471,  247,  285,  472,
      285,  285,  473,  285,  878,  285,  285,  247,  475,  444,
      475,  475,  246,  247,  246,  246,  246,  877,  246,  246,
      246,  247,  246,  246,  246,  247,  246,  246,  876,  474,
      875,  286,  874,  873,  296,  479,  286,  296,  476,  461,

      246,  286,  246,  246,  246,  247,  246,  246,  872,  247,
      477,  871,  246,  247,  246,  246,  478,  247,  246,  870,
      246,  246,  869,  290,  868,  867,  866,  297,  482,  483,
      484,  482,  863,  247,  862,  861,  860,  247,  298,  299,
      300,  298,  859,  296,  291,  247,  296,  296,  858,  481,
      296,  247,  480,  300,  299,  300,  300,  332,  331,  332,
      332,  297,  857,  296,  296,  485,  296,  296,  856,  487,
      296,  301,  303,  296,  296,  486,  297,  296,  296,  296,
      297,  296,  296,  855,  296,  489,  301,  296,  854,  490,
      296,  296,  296,  296,  296,  296,  297,  297,  491,  492,

      488,  296,  853,  297,  296,  493,  296,  297,  852,  296,
      296,  297,  297,  296,  851,  296,  850,  297,  296,  497,
      494,  495,  849,  297,  297,  297,  499,  296,  498,  296,
      296,  848,  296,  296,  297,  496,  296,  296,  296,  297,
      296,  296,  500,  297,  296,  847,  846,  296,  297,  505,
      296,  501,  502,  296,  296,  296,  504,  296,  296,  845,
      297,  296,  297,  503,  296,  740,  297,  508,  739,  506,
      297,  297,  844,  843,  507,  842,  510,  297,  509,  296,
      841,  296,  296,  297,  296,  840,  839,  297,  297,  330,
      331,  332,  330,  336,  297,  214,  336,  838,  511,  731,

      214,  512,  332,  331,  332,  332,  336,  296,  214,  336,
      296,  730,  297,  214,  297,  837,  296,  296,  513,  296,
      296,  296,  297,  836,  296,  835,  337,  514,  483,  515,
      514,  834,  519,  296,  214,  296,  296,  833,  296,  337,
      297,  517,  516,  500,  593,  296,  832,  593,  296,  297,
      297,  831,  296,  518,  297,  296,  341,  830,  829,  720,
      337,  346,  347,  348,  346,  828,  297,  827,  297,  350,
      347,  350,  350,  392,  826,  520,  392,  342,  297,  380,
      381,  380,  380,  825,  350,  297,  350,  350,  392,  824,
      521,  392,  594,  823,  349,  380,  381,  380,  380,  822,

      749,  398,  349,  398,  398,  746,  393,  557,  558,  559,
      557,  394,  395,  396,  394,  745,  744,  349,  743,  742,
      741,  393,  398,  395,  398,  398,  401,  400,  401,  401,
      399,  400,  401,  399,  397,  401,  400,  401,  401,  246,
      393,  246,  246,  740,  397,  591,  592,  591,  591,  599,
      600,  601,  599,  739,  738,  397,  602,  603,  604,  602,
      737,  611,  736,  393,  440,  441,  442,  440,  442,  441,
      442,  442,  247,  443,  444,  443,  443,  445,  281,  445,
      445,  246,  735,  246,  246,  246,  734,  246,  246,  733,
      732,  246,  605,  246,  246,  731,  730,  246,  438,  246,

      246,  246,  729,  246,  246,  438,  247,  728,  246,  606,
      246,  246,  593,  236,  247,  593,  607,  727,  247,  246,
      609,  246,  246,  726,  247,  610,  608,  725,  724,  246,
      247,  246,  246,  246,  247,  246,  246,  723,  722,  721,
      613,  247,  612,  246,  720,  246,  246,  246,  614,  246,
      246,  246,  247,  246,  246,  719,  246,  718,  246,  246,
      594,  246,  247,  246,  246,  747,  247,  618,  747,  717,
      296,  615,  617,  296,  620,  616,  247,  716,  715,  714,
      247,  619,  713,  246,  247,  246,  246,  647,  747,  247,
      246,  747,  246,  246,  247,  246,  712,  246,  246,  246,

      711,  246,  246,  297,  621,  246,  296,  246,  246,  296,
      623,  624,  246,  748,  246,  246,  247,  642,  622,  246,
      625,  246,  246,  247,  246,  626,  246,  246,  247,  551,
      710,  246,  247,  246,  246,  709,  748,  708,  247,  297,
      628,  627,  707,  706,  246,  247,  246,  246,  246,  705,
      246,  246,  247,  246,  702,  246,  246,  247,  246,  629,
      246,  246,  630,  632,  247,  246,  747,  246,  246,  747,
      633,  634,  631,  475,  444,  475,  475,  247,  701,  700,
      699,  247,  636,  592,  636,  636,  247,  637,  698,  246,
      637,  247,  246, 1037,  246,  246, 1037,  697,  247,  635,

      246,  696,  246,  246,  695,  246,  286,  246,  246,  246,
      296,  246,  246,  296,  748,  247,  482,  483,  484,  482,
      247,  484,  483,  484,  484,  247,  476,  296,  296,  694,
      296,  296,  639,  247,  643,  638,  296,  296,  247,  296,
      296, 1038,  247,  297,  640,  296,  691,  690,  296,  297,
      641,  296,  644,  296,  296,  646,  296,  645,  689,  648,
      297,  297,  650,  296,  296,  688,  296,  296,  649,  297,
      297,  687,  296,  296,  296,  296,  296,  296,  297,  651,
      296,  652,  686,  296,  297,  655,  297,  653,  296,  296,
      685,  296,  296,  657,  684,  683,  297,  297,  654,  656,

      659,  682,  681,  680,  660,  297,  297,  297,  296,  658,
      679,  296,  296,  297,  296,  296,  296,  296,  598,  296,
      661,  297,  297,  296,  597,  596,  296,  662,  431,  663,
      296,  296,  595,  296,  296,  296,  664,  296,  296,  665,
      296,  297,  590,  296,  589,  297,  296,  297,  588,  297,
      669,  587,  296,  586,  670,  296,  297,  674,  666,  668,
      674,  667,  583,  297,  297,  671,  296,  582,  297,  296,
      297,  514,  483,  515,  514,  581,  297,  672,  214,  515,
      483,  515,  515,  580,  579,  297,  673,  592,  591,  673,
      297,  296,  296,  296,  296,  296,  296,  578,  577,  297,

      591,  592,  591,  591,  337,  675,  676,  557,  558,  559,
      557,  559,  558,  559,  559, 1037,  576,  516, 1037,  297,
      591,  592,  591,  591,  297,  297,  297,  599,  600,  601,
      599,  677,  575,  572,  678,  601,  600,  601,  601,  571,
      393,  602,  603,  604,  602,  604,  603,  604,  604,  246,
     1037,  246,  246, 1037,  246,  570,  246,  246,  246,  569,
      246,  246,  246, 1038,  246,  246,  750,  751,  246,  568,
      246,  246,  246,  567,  246,  246,  236,  566,  565,  564,
      753,  246,  247,  246,  246,  754,  563,  247,  752,  562,
      236,  247,  561,  560, 1078,  247,  756, 1078, 1038, 1078,

      755,  247, 1078,  556,  296,  247,  246,  296,  246,  246,
      246,  555,  246,  246,  247,  246,  757,  246,  246,  246,
      554,  246,  246,  246,  553,  246,  246,  246,  806,  246,
      246,  552,  246,  759,  246,  246,  550,  297,  296,  247,
      760,  296, 1079,  247,  758,  547,  546, 1079,  247,  763,
      545,  761,  247,  762,  544,  246,  247,  246,  246,  296,
      247,  246,  296,  246,  246,  247,  246,  794,  246,  246,
      543,  297,  787,  246,  296,  246,  246,  296,  542,  541,
      764,  766,  765,  767,  540,  539,  538,  246,  247,  246,
      246,  786,  297,  246,  247,  246,  246,  768,  246,  247,

      246,  246,  246,  537,  246,  246,  247,  297,  246,  536,
      246,  246,  246,  296,  246,  246,  296,  771,  535,  534,
      247,  769,  770,  772,  531,  530,  247,  246,  773,  246,
      246,  247,  529,  528,  796,  247,  246,  527,  246,  246,
      246,  247,  246,  246,  526,  247,  297,  775,  525,  246,
      776,  246,  246,  524,  523,  246,  774,  246,  246,  777,
      247,  246,  522,  246,  246,  246,  353,  246,  246,  247,
      242,  439,  438,  247,  636,  592,  636,  636,  236,  778,
      779,  637,  247,  246,  637,  232,  437,  246,  247,  246,
      246,  228,  223,  246,  247,  246,  246,  246,  247,  246,

      246,  784,  436,  246,  784,  296,  435,  247,  296,  296,
      296,  780,  296,  296,  247,  434,  433,  432,  296,  296,
      247,  296,  296,  789,  296,  296,  247,  296,  296,  638,
      247,  222,  783,  792,  247,  781,  790,  791,  297,  782,
      788,  799,  297,  297,  296,  217,  216,  296,  795,  785,
      296,  297,  297,  296,  793,  430,  296,  297,  297,  296,
      296,  296,  427,  296,  296,  296,  426,  425,  296,  296,
      296,  296,  296,  296,  296,  424,  802,  297,  797,  803,
      804,  296,  798,  297,  296,  800,  801,  296, 1078,  297,
      296, 1078,  296,  297,  297,  296,  807,  296,  297,  805,

      296,  423,  297,  297,  297,  296,  296,  808,  296,  296,
      422,  421,  420,  809,  297,  812,  810,  811,  296,  296,
      297,  296,  296,  296,  296,  297,  296,  296,  813,  419,
      297,  673,  592,  591,  673,  418, 1079,  814,  297,  297,
      674,  296,  296,  674,  296,  296,  296,  820,  815,  296,
      820,  297,  297,  417,  416,  415,  297,  297,  246,  414,
      246,  246,  411,  246,  297,  246,  246,  410,  409,  246,
      816,  246,  246,  297,  297,  297,  408,  819,  882,  297,
      297,  246,  407,  246,  246,  406,  881,  885,  675,  817,
      405,  247,  818,  404,  403,  821,  247,  246,  402,  246,

      246,  246,  247,  246,  246,  179,  386,  884,  883,  385,
      246,  886,  246,  246,  247,  246,  382,  246,  246,  246,
      887,  246,  246,  246,  379,  246,  246,  374,  373,  888,
      247,  372,  361,  889,  247,  246,  357,  246,  246,  246,
      354,  246,  246,  247,  246,  890,  246,  246,  247,  891,
      353,  353,  247,  244,  892,  246,  247,  246,  246,  246,
      296,  246,  246,  296,  240,  237,  236,  246,  247,  246,
      246,  246,  247,  246,  246,  912,  246,  247,  246,  246,
      895,  232,  246,  893,  246,  246,  894,  246,  247,  246,
      246,  228,  247,  297,  223,  222,  896,  217,  897,  246,

      247,  246,  246,  246,  247,  246,  246,  216,  246,  247,
      246,  246,  206,  900,  205,  247,  898,  200,  901,  296,
      247,  246,  296,  246,  246,  199,  198,  246,  899,  246,
      246,  246,  247,  246,  246,  187,  247,  903,  183,  180,
      179,  247,  246,  902,  246,  246,  246,  911,  246,  246,
      179,  178,  297,  246,  247,  246,  246, 1137, 1137, 1137,
      247,  904, 1137,  296,  247,  246,  296,  246,  246,  246,
     1137,  246,  246,  914,  246,  247,  246,  246,  246,  247,
      246,  246,  905, 1137, 1137, 1137,  247,  246,  906,  246,
      246,  784,  296,  246,  784,  296,  297,  246,  247,  246,

      246, 1137,  247, 1137, 1137,  296, 1137,  247,  296,  907,
     1137,  247, 1137,  908,  296, 1137, 1137,  296, 1137,  913,
      247,  909, 1137,  915,  247,  297,  296, 1137, 1137,  296,
      247,  296,  296, 1137,  296,  296,  916, 1137,  297,  785,
      296,  917,  918,  296, 1137,  910,  296,  297,  296,  296,
      919,  296,  296, 1137,  296,  296,  920,  296,  921,  297,
     1137, 1137,  922,  296,  297,  297,  296, 1137, 1137, 1137,
     1137,  296,  296,  297,  296,  296, 1137,  296, 1137,  297,
      296,  297,  923,  296,  925,  297,  296,  297,  296,  296,
      924,  296,  296, 1137,  296, 1137,  297,  296,  296,  927,

      926,  296, 1137,  296,  297,  297,  296, 1137,  930,  296,
      297,  296,  296,  931,  296, 1137,  297,  928,  929,  933,
      296,  297,  297,  296,  934,  296,  296,  297,  296,  296,
     1137,  297,  296,  932,  296,  296,  297,  296,  296, 1137,
      296,  296,  297,  296,  297,  296, 1137,  820,  296,  296,
      820, 1137,  296,  297, 1137,  935, 1137,  936,  297,  297,
      246,  296,  246,  246,  296,  297,  246,  297,  246,  246,
      979,  297,  937,  297,  296,  938,  980,  296,  297,  939,
      297,  246,  297,  246,  246,  246, 1137,  246,  246,  296,
     1137,  981,  296,  247,  297,  821, 1137,  940,  246,  247,

      246,  246,  246, 1001,  246,  246,  246,  297,  246,  246,
      246, 1137,  246,  246,  247, 1137, 1137,  246,  247,  246,
      246,  246,  297,  246,  246, 1137,  246,  982,  246,  246,
      246,  247,  246,  246,  246,  247,  246,  246,  246,  247,
      246,  246, 1137,  247,  983,  246, 1137,  246,  246, 1137,
      247, 1137, 1137,  246,  247,  246,  246,  987,  984,  247,
     1137, 1137,  246,  247,  246,  246,  246,  247,  246,  246,
      246,  247,  246,  246,  985, 1137,  988, 1137,  247,  246,
      989,  246,  246, 1137, 1137, 1137,  247,  986,  246,  990,
      246,  246, 1137, 1137,  246,  247,  246,  246,  246,  247,

      246,  246,  246,  247,  246,  246, 1137, 1137,  246,  991,
      246,  246,  247,  246, 1137,  246,  246,  246,  993,  246,
      246,  247, 1137,  246,  992,  246,  246,  247,  994, 1137,
      246,  247,  246,  246,  246,  247,  246,  246, 1137,  296,
      296,  247,  296,  296,  296,  296,  247,  296,  296,  998,
      247, 1137, 1137, 1137,  999, 1000,  247,  296,  296,  996,
      296,  296,  995,  247, 1137,  296,  296,  247,  296,  296,
     1137,  296,  297,  297,  296,  997,  296,  297,  297,  296,
      296,  296,  296,  296,  296,  296, 1002, 1137, 1137, 1137,
      297,  297,  296,  296, 1003,  296,  296,  296,  297,  297,

      296, 1006, 1007, 1008,  297, 1005, 1137, 1009,  296,  297,
     1004,  296, 1137,  297,  297,  297,  296,  296,  296,  296,
      296,  296, 1137, 1137,  296,  297,  297,  296,  296, 1137,
      297,  296, 1010,  296,  296, 1137,  296,  296, 1012,  296,
      296,  297,  296,  296,  296, 1137, 1011,  296, 1013,  297,
      297,  297, 1137,  246, 1137,  246,  246,  297, 1137, 1137,
      246,  297,  246,  246, 1137, 1137,  297,  297,  246, 1137,
      246,  246,  297,  297, 1137, 1015, 1137,  297,  246, 1014,
      246,  246, 1137, 1137, 1137, 1016,  247,  246, 1040,  246,
      246, 1137,  246,  247,  246,  246,  246, 1137,  246,  246,

      246,  247,  246,  246,  246, 1137,  246,  246, 1137, 1137,
      246,  247,  246,  246, 1137, 1042,  246, 1041,  246,  246,
      247,  246, 1043,  246,  246,  247, 1044, 1137,  246,  247,
      246,  246,  246,  247,  246,  246, 1137,  247, 1045,  246,
     1137,  246,  246,  247, 1137,  246, 1137,  246,  246,  247,
      246, 1137,  246,  246,  247, 1047, 1137, 1049, 1048,  246,
     1049,  247, 1137, 1137,  246,  247,  246,  246, 1046, 1137,
      296,  296,  247,  296,  296, 1137,  296,  296,  247,  296,
      296,  296,  296,  247,  296,  296, 1137, 1052, 1137,  296,
      247,  296,  296,  296,  296,  296,  296,  247,  296,  296,

     1051, 1137,  296,  297,  297, 1050, 1137, 1053, 1054,  297,
      297, 1137, 1137, 1055,  297,  297,  296, 1056,  296,  296,
      296,  296,  297,  296,  297, 1137,  297, 1137,  297, 1137,
     1057,  296,  297,  296,  296, 1061,  296,  296, 1061,  296,
      296, 1137,  296, 1059, 1137, 1060, 1137, 1058, 1137,  297,
     1137,  297,  246,  297,  246,  246,  246, 1137,  246,  246,
      246, 1137,  246,  246,  297, 1137,  297, 1137,  297, 1137,
      297,  246,  297,  246,  246, 1063, 1137,  246, 1080,  246,
      246, 1082, 1081, 1062,  246,  247,  246,  246,  246,  247,
      246,  246, 1083,  247,  246, 1137,  246,  246, 1084,  246,

     1137,  246,  246, 1049,  247,  246, 1049, 1137, 1137,  246,
      247,  246,  246, 1087, 1137,  246, 1087,  247, 1137,  296,
     1137,  247,  296,  296, 1137,  296,  296,  247,  296, 1137,
      296, 1137,  247,  296, 1085,  296,  247, 1137,  296, 1137,
     1091,  296,  247, 1137,  296, 1089,  247, 1090, 1137, 1137,
     1092, 1050,  297, 1137, 1137, 1137,  297, 1086,  297,  296,
     1137, 1088,  296,  297,  296, 1137, 1137,  296,  297, 1093,
      296, 1137, 1137,  296,  297, 1061,  296, 1096, 1061,  296,
     1096,  246, 1137,  246,  246,  246, 1137,  246,  246, 1137,
     1137, 1107,  297,  246, 1137,  246,  246,  297, 1137,  246,

     1108,  246,  246,  297,  246, 1094,  246,  246,  297,  297,
      297, 1137, 1137,  246,  247,  246,  246,  246,  247,  246,
      246, 1137, 1137, 1062, 1095, 1097,  247, 1109, 1087, 1137,
      246, 1087,  247,  246, 1137,  246,  246,  247,  296,  296,
     1110,  296,  296, 1137,  296, 1137,  247,  296, 1112,  296,
      247, 1137,  296,  296, 1113,  296,  296,  296,  296, 1114,
      296,  247, 1096, 1137,  296, 1096,  247,  296, 1137, 1137,
     1137,  297,  297, 1137, 1137, 1137, 1088,  297, 1137, 1137,
     1137, 1111,  297, 1137, 1137, 1137,  297, 1137,  297,  296,
      297, 1115,  296, 1137, 1137,  297,  246,  297,  246,  246,

     1137,  246, 1137,  246,  246,  246,  296,  246,  246,  296,
     1097, 1121, 1116,  246, 1137,  246,  246,  246,  296,  246,
      246,  296,  297,  296,  296, 1137,  296,  296, 1123,  247,
      246, 1137,  246,  246,  247, 1137, 1137, 1137,  247,  297,
      246,  296,  246,  246,  296,  296,  247, 1137,  296,  296,
      247,  297,  296, 1137, 1137, 1122,  297,  297,  246,  296,
      246,  246,  296,  247, 1137, 1124,  246,  296,  246,  246,
      296, 1137, 1137,  247,  297, 1137, 1135, 1136,  297, 1137,
     1137,  246,  297,  246,  246, 1127, 1137, 1132, 1137, 1137,
     1128,  247,  297, 1137, 1137, 1137, 1131, 1137, 1137,  247,

      297, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  247,   52,   52,   52,   52,   52,
       52,   57,   57,   57,   57,   57,   57,   64,   64,   64,
       64,   64,   64,   69,   69,   69,   69,   69,   69,  171,
      171,  171,  171,  171,  171,  214,  214, 1137,  214,  214,
      214,  224,  224,  224,  224,  224,  224,  227, 1137, 1137,
     1137,  227,  227,  229,  229,  229,  229,  229,  229,  235,
      235, 1137, 1137,  235,  235,  241,  241,  241,  241,  241,
      241,  245,  245, 1137,  245,  245,  245,  284,  284, 1137,
      284,  284,  284,  295,  295, 1137, 1137, 1137,  295,  335,

      335, 1137,  335,  335,  335,  391,  391, 1137, 1137, 1137,
      391,   17, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137
    } ;

static yyconst flex_int16_t yy_chk[3764] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    7,    2,    2,    3,    3,    3,    3,
       63,    2,    4,    4,    4,    4,    4,    5,    5,    6,
        6,    8,    8,   19,    2,   28,   19,    4,   15,   15,
       15,   15,   28,   30,   39,   15,   35,   30,   34,   63,
       33,    2, 1153,    2,   30,    2,   39,   32,    2,    2,

       32,   33,   34,   35,   32,   40,    4,   32,   69,   69,
        5,   15,    6,   40,   50,    5,   50,    6,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       46,  154,   10,   10,   16,   16,   16,   16,   49,   10,
     1133,   16,  154,  155,   46,   55,   55,   55,   60,   60,
       60,   60,   10,   67,  149,  156,  166,  155,   67,   49,

     1130,  149,  160,  170,  151,  170, 1129,   16,  151,   10,
      166,   10,  156,   10,  160,  151,   10,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
      169,  190,   12,   12,   72,  107,   72,   72,  107,   12,
      161,   73,   73,   73,   73,  190,  153,  177,  161,  153,
      177,  169,   12,  153,  215,  215,  153,  163,  163,  163,

      163,  205, 1126,  212,  205,  212, 1125,   72,  107,   12,
      238,   12, 1120,   12,   73,  238,   12,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
      241,  241,   14,   14,   75,   75,   75,   75, 1118,   14,
      219,   76,  111,   76,   76,  111,   77,  115,   77,   77,
      115,   78,   14,   78,   78,   77,   79, 1117,   79,   79,

       80,  219,   80,   80, 1105,   79,  234,   75, 1103,   14,
     1101,   14, 1100,   14,   76,  111,   14,   14,   43,   77,
      115,   43,   43,   81,   78,   81,   81, 1099,   43,   79,
      226,  226,  226,   80,   82,  234,   82,   82,   83,   81,
       83,   83,  379,  364,  117,  379,   84,  117,   84,   84,
      384,  384,   82,   83, 1098,  388,   81,  364,   43,   82,
       43, 1079,  117, 1076,   84,   43,   43,   82,   84,  117,
       85,   83,   85,   85,  415,   84,  388,  117,   87,   84,
       87,   87,  116,  535,   88,  116,   88,   88,  415,   90,
      425,   90,   90,  425,   87,   88, 1074,  535,  116,   85,

      231,  231,  231,   85,   86,   87,   86,   86,  728,   88,
       89,   87,   89,   89, 1072,  116,   90,   88, 1071, 1069,
       86,   89,   90,   86,  728, 1068,   91,   86,   91,   91,
       86,   92,  545,   92,   92,  545, 1067,   86,   89,   93,
      836,   93,   93,   89,   94,  863,   94,   94,   91, 1066,
       95,  432,   95,   95,  432,   94,  836,   93, 1065,   91,
       92,  863, 1064,   94,   92,   95, 1038, 1036,   97,   93,
       97,   97,   93,   96,   96,   96,   96,   94,   98,   98,
       98,   98,   99,   95,   99,   99,  100,  946,  100,  100,
     1034,  101, 1032,  101,  101,  102, 1031,  102,  102,  432,

     1030,   97,  101,  946,   97,  103,   96,  103,  103, 1029,
      104,   98,  104,  104, 1027,   99,  101, 1025,  106,  100,
      106,  106, 1024,  105,  101,  105,  105, 1023,  102,  108,
      108,  108,  108,  104,  110,  110,  110,  110,  103, 1022,
     1021,  102,  119,  104,  112,  119,  114,  112,  103,  114,
     1020,  106, 1019,  112,  104,  114,  105,  105,  118,  105,
      119,  118,  108, 1018,  119,  120,  106,  110,  120,  121,
     1017,  119,  121,  118,  978,  119,  977,  112,  123,  114,
      122,  123,  975,  122,  126,  121,  974,  126,  121,  123,
      124,  118,  121,  124,  120,  121,  122,  125,  120,  972,

      125,  124,  121,  123,  971,  127,  126,  122,  127,  128,
      967,  123,  128,  122,  966,  965,  130,  126,  124,  130,
      964,  962,  129,  124,  125,  129,  132,  128,  958,  132,
      125,  130,  135,  129,  127,  135,  957,  138,  127,  128,
      138,  129,  128,  131,  131,  131,  131,  956,  955,  130,
      133,  133,  133,  133,  134,  129,  134,  134,  954,  132,
      136,  134,  132,  136,  137,  135,  953,  137,  952,  139,
      138,  136,  139,  951,  141,  140,  131,  141,  140,  171,
      138,  950,  171,  133,  949,  136,  948,  134,  142,  142,
      142,  142,  139,  136,  947,  945,  944,  137,  144,  144,

      144,  144,  139,  165,  165,  165,  165,  141,  140,  140,
      137,  140,  171,  139,  172,  172,  172,  172,  943,  942,
      941,  142,  141,  174,  174,  174,  174,  176,  176,  176,
      176,  144,  240,  240,  240,  240,  165,  245,  880,  245,
      245,  246,  878,  246,  246,  877,  876,  172,  875,  247,
      247,  247,  247,  874,  873,  263,  174,  263,  263,  871,
      176,  248,  248,  248,  248,  250,  250,  250,  250,  254,
      245,  254,  254,  868,  246,  251,  251,  251,  251,  867,
      866,  240,  247,  253,  263,  253,  253,  256,  263,  256,
      256,  254,  253,  255,  248,  255,  255,  257,  250,  257,

      257,  865,  254,  258,  255,  258,  258,  864,  259,  256,
      259,  259,  260,  862,  260,  260,  253,  854,  258,  259,
      256,  852,  261,  257,  261,  261,  255,  851,  850,  849,
      257,  260,  262,  848,  262,  262,  258,  261,  847,  846,
      265,  259,  265,  265,  845,  260,  264,  262,  264,  264,
      266,  844,  266,  266,  843,  261,  267,  264,  267,  267,
      268,  842,  268,  268,  841,  262,  269,  265,  269,  269,
      840,  264,  266,  265,  270,  295,  270,  270,  295,  264,
      839,  267,  271,  266,  271,  271,  838,  268,  837,  267,
      269,  835,  272,  268,  272,  272,  834,  270,  273,  269,

      273,  273,  274,  833,  274,  274,  832,  270,  295,  273,
      831,  272,  271,  830,  275,  271,  275,  275,  829,  828,
      276,  274,  276,  276,  277,  272,  277,  277,  827,  826,
      825,  273,  276,  824,  278,  274,  278,  278,  823,  822,
      279,  277,  279,  279,  275,  749,  748,  275,  280,  280,
      280,  280,  282,  276,  282,  282,  278,  277,  284,  279,
      284,  284,  279,  285,  746,  285,  285,  278,  286,  286,
      286,  286,  287,  279,  287,  287,  288,  745,  288,  288,
      289,  280,  289,  289,  290,  282,  290,  290,  743,  282,
      742,  284,  741,  738,  296,  290,  285,  296,  287,  287,

      291,  286,  291,  291,  293,  287,  293,  293,  737,  288,
      288,  736,  292,  289,  292,  292,  289,  290,  294,  735,
      294,  294,  734,  291,  733,  732,  729,  296,  297,  297,
      297,  297,  727,  291,  726,  725,  724,  293,  298,  298,
      298,  298,  723,  304,  291,  292,  304,  306,  722,  293,
      306,  294,  292,  300,  300,  300,  300,  301,  301,  301,
      301,  297,  721,  303,  305,  304,  303,  305,  719,  306,
      308,  298,  303,  308,  307,  305,  304,  307,  309,  310,
      306,  309,  310,  718,  311,  308,  300,  311,  717,  309,
      312,  313,  315,  312,  313,  315,  303,  305,  310,  311,

      307,  317,  716,  308,  317,  312,  316,  307,  715,  316,
      314,  309,  310,  314,  714,  318,  713,  311,  318,  315,
      313,  314,  711,  312,  313,  315,  317,  319,  316,  320,
      319,  710,  320,  321,  317,  314,  321,  322,  323,  316,
      322,  323,  318,  314,  325,  709,  708,  325,  318,  323,
      324,  319,  320,  324,  328,  326,  322,  328,  326,  707,
      319,  327,  320,  321,  327,  706,  321,  326,  705,  324,
      322,  323,  704,  703,  325,  702,  328,  325,  327,  329,
      701,  333,  329,  324,  333,  700,  699,  328,  326,  330,
      330,  330,  330,  335,  327,  335,  335,  698,  329,  697,

      335,  329,  332,  332,  332,  332,  336,  339,  336,  336,
      339,  696,  329,  336,  333,  695,  338,  340,  333,  338,
      340,  341,  330,  694,  341,  693,  335,  337,  337,  337,
      337,  692,  341,  342,  337,  343,  342,  691,  343,  336,
      339,  339,  338,  338,  552,  344,  690,  552,  344,  338,
      340,  689,  345,  340,  341,  345,  342,  688,  687,  686,
      337,  346,  346,  346,  346,  685,  342,  684,  343,  348,
      348,  348,  348,  391,  683,  343,  391,  342,  344,  349,
      349,  349,  349,  682,  350,  345,  350,  350,  392,  681,
      344,  392,  552,  680,  346,  380,  380,  380,  380,  679,

      598,  398,  348,  398,  398,  596,  391,  393,  393,  393,
      393,  394,  394,  394,  394,  595,  594,  350,  590,  589,
      588,  392,  396,  396,  396,  396,  397,  397,  397,  397,
      399,  399,  399,  399,  398,  401,  401,  401,  401,  452,
      393,  452,  452,  587,  394,  431,  431,  431,  431,  438,
      438,  438,  438,  586,  585,  396,  439,  439,  439,  439,
      584,  452,  583,  399,  440,  440,  440,  440,  442,  442,
      442,  442,  452,  443,  443,  443,  443,  445,  445,  445,
      445,  446,  582,  446,  446,  447,  581,  447,  447,  580,
      579,  448,  446,  448,  448,  578,  577,  449,  438,  449,

      449,  450,  576,  450,  450,  439,  443,  575,  451,  447,
      451,  451,  593,  440,  446,  593,  448,  574,  447,  453,
      450,  453,  453,  573,  448,  451,  449,  572,  571,  454,
      449,  454,  454,  455,  450,  455,  455,  570,  569,  568,
      454,  451,  453,  456,  567,  456,  456,  458,  455,  458,
      458,  457,  453,  457,  457,  566,  459,  565,  459,  459,
      593,  460,  454,  460,  460,  597,  455,  459,  597,  564,
      490,  456,  458,  490,  460,  457,  456,  563,  562,  561,
      458,  459,  560,  461,  457,  461,  461,  490,  712,  459,
      462,  712,  462,  462,  460,  463,  556,  463,  463,  464,

      555,  464,  464,  490,  461,  465,  485,  465,  465,  485,
      463,  464,  466,  597,  466,  466,  461,  485,  462,  467,
      465,  467,  467,  462,  468,  466,  468,  468,  463,  554,
      553,  469,  464,  469,  469,  550,  712,  549,  465,  485,
      468,  467,  548,  547,  470,  466,  470,  470,  471,  546,
      471,  471,  467,  472,  544,  472,  472,  468,  473,  469,
      473,  473,  469,  471,  469,  474,  747,  474,  474,  747,
      472,  473,  470,  475,  475,  475,  475,  470,  543,  542,
      541,  471,  476,  476,  476,  476,  472,  477,  540,  477,
      477,  473,  478,  976,  478,  478,  976,  539,  474,  474,

      479,  538,  479,  479,  537,  480,  475,  480,  480,  481,
      486,  481,  481,  486,  747,  476,  482,  482,  482,  482,
      477,  484,  484,  484,  484,  478,  479,  487,  488,  536,
      487,  488,  478,  479,  486,  477,  489,  491,  480,  489,
      491,  976,  481,  486,  480,  492,  534,  533,  492,  482,
      481,  493,  487,  495,  493,  489,  495,  488,  532,  491,
      487,  488,  493,  496,  494,  531,  496,  494,  492,  489,
      491,  530,  501,  497,  498,  501,  497,  498,  492,  494,
      499,  495,  529,  499,  493,  498,  495,  496,  500,  502,
      528,  500,  502,  499,  527,  526,  496,  494,  497,  498,

      501,  525,  524,  523,  502,  501,  497,  498,  503,  500,
      522,  503,  504,  499,  506,  504,  505,  506,  437,  505,
      503,  500,  502,  507,  436,  435,  507,  504,  434,  505,
      508,  509,  433,  508,  509,  510,  506,  511,  510,  507,
      511,  503,  430,  513,  429,  504,  513,  506,  428,  505,
      510,  427,  512,  426,  511,  512,  507,  517,  508,  509,
      517,  508,  424,  508,  509,  512,  518,  423,  510,  518,
      511,  514,  514,  514,  514,  422,  513,  513,  514,  515,
      515,  515,  515,  421,  420,  512,  516,  516,  516,  516,
      517,  519,  520,  521,  519,  520,  521,  419,  418,  518,

      551,  551,  551,  551,  514,  517,  518,  557,  557,  557,
      557,  559,  559,  559,  559, 1026,  417,  519, 1026,  516,
      591,  591,  591,  591,  519,  520,  521,  599,  599,  599,
      599,  520,  416,  414,  521,  601,  601,  601,  601,  413,
      557,  602,  602,  602,  602,  604,  604,  604,  604,  605,
     1037,  605,  605, 1037,  606,  412,  606,  606,  607,  411,
      607,  607,  608, 1026,  608,  608,  605,  606,  609,  410,
      609,  609,  610,  409,  610,  610,  599,  408,  407,  406,
      608,  611,  605,  611,  611,  609,  405,  606,  607,  404,
      602,  607,  403,  402, 1039,  608,  611, 1039, 1037, 1070,

      610,  609, 1070,  390,  662,  610,  612,  662,  612,  612,
      614,  389,  614,  614,  611,  613,  612,  613,  613,  615,
      387,  615,  615,  616,  386,  616,  616,  617,  662,  617,
      617,  385,  618,  614,  618,  618,  382,  662,  650,  612,
      615,  650, 1039,  614,  613,  378,  377, 1070,  613,  618,
      376,  616,  615,  617,  375,  619,  616,  619,  619,  643,
      617,  620,  643,  620,  620,  618,  621,  650,  621,  621,
      374,  650,  643,  622,  642,  622,  622,  642,  373,  372,
      619,  621,  620,  622,  371,  370,  369,  623,  619,  623,
      623,  642,  643,  624,  620,  624,  624,  623,  625,  621,

      625,  625,  626,  368,  626,  626,  622,  642,  627,  367,
      627,  627,  628,  652,  628,  628,  652,  626,  366,  365,
      623,  624,  625,  627,  363,  362,  624,  629,  628,  629,
      629,  625,  361,  360,  652,  626,  630,  359,  630,  630,
      631,  627,  631,  631,  358,  628,  652,  630,  357,  632,
      631,  632,  632,  356,  355,  634,  629,  634,  634,  632,
      629,  633,  354,  633,  633,  635,  353,  635,  635,  630,
      243,  239,  236,  631,  636,  636,  636,  636,  235,  633,
      634,  637,  632,  637,  637,  233,  232,  638,  634,  638,
      638,  230,  225,  639,  633,  639,  639,  640,  635,  640,

      640,  641,  221,  641,  641,  645,  220,  636,  645,  647,
      644,  635,  647,  644,  637,  218,  217,  216,  648,  646,
      638,  648,  646,  645,  655,  651,  639,  655,  651,  637,
      640,  213,  640,  648,  641,  638,  646,  647,  645,  639,
      644,  655,  647,  644,  649,  211,  210,  649,  651,  641,
      653,  648,  646,  653,  649,  206,  654,  655,  651,  654,
      656,  658,  204,  656,  658,  657,  203,  202,  657,  659,
      660,  661,  659,  660,  661,  201,  658,  649,  653,  659,
      660,  663,  654,  653,  663,  656,  657,  666, 1078,  654,
      666, 1078,  664,  656,  658,  664,  663,  665,  657,  661,

      665,  200,  659,  660,  661,  668,  667,  664,  668,  667,
      199,  198,  197,  665,  663,  668,  666,  667,  669,  670,
      666,  669,  670,  671,  672,  664,  671,  672,  669,  196,
      665,  673,  673,  673,  673,  195, 1078,  670,  668,  667,
      674,  675,  677,  674,  675,  677,  676,  678,  671,  676,
      678,  669,  670,  194,  193,  192,  671,  672,  750,  191,
      750,  750,  189,  751,  673,  751,  751,  188,  187,  754,
      672,  754,  754,  674,  675,  677,  186,  677,  751,  676,
      678,  752,  185,  752,  752,  184,  750,  754,  674,  675,
      183,  750,  676,  182,  181,  678,  751,  753,  180,  753,

      753,  755,  754,  755,  755,  179,  168,  753,  752,  167,
      756,  755,  756,  756,  752,  757,  164,  757,  757,  758,
      756,  758,  758,  759,  162,  759,  759,  159,  158,  758,
      753,  157,  152,  759,  755,  760,  150,  760,  760,  761,
      148,  761,  761,  756,  762,  760,  762,  762,  757,  761,
      146,  145,  758,   71,  762,  763,  759,  763,  763,  764,
      787,  764,  764,  787,   68,   66,   64,  765,  760,  765,
      765,  766,  761,  766,  766,  787,  767,  762,  767,  767,
      765,   62,  768,  763,  768,  768,  764,  769,  763,  769,
      769,   59,  764,  787,   54,   51,  765,   48,  766,  770,

      765,  770,  770,  771,  766,  771,  771,   47,  772,  767,
      772,  772,   42,  771,   41,  768,  769,   38,  772,  786,
      769,  773,  786,  773,  773,   37,   36,  774,  770,  774,
      774,  775,  770,  775,  775,   31,  771,  774,   29,   27,
       25,  772,  776,  773,  776,  776,  777,  786,  777,  777,
       23,   21,  786,  778,  773,  778,  778,   17,    0,    0,
      774,  775,    0,  789,  775,  779,  789,  779,  779,  780,
        0,  780,  780,  789,  781,  776,  781,  781,  782,  777,
      782,  782,  778,    0,    0,    0,  778,  783,  779,  783,
      783,  784,  788,  784,  784,  788,  789,  785,  779,  785,

      785,    0,  780,    0,    0,  790,    0,  781,  790,  780,
        0,  782,    0,  782,  793,    0,    0,  793,    0,  788,
      783,  783,    0,  790,  784,  788,  791,    0,    0,  791,
      785,  792,  794,    0,  792,  794,  791,    0,  790,  784,
      795,  792,  794,  795,    0,  785,  796,  793,  797,  796,
      795,  797,  798,    0,  799,  798,  796,  799,  797,  791,
        0,    0,  798,  800,  792,  794,  800,    0,    0,    0,
        0,  801,  802,  795,  801,  802,    0,  803,    0,  796,
      803,  797,  799,  804,  801,  798,  804,  799,  805,  806,
      800,  805,  806,    0,  811,    0,  800,  811,  807,  802,

      801,  807,    0,  808,  801,  802,  808,    0,  807,  810,
      803,  809,  810,  808,  809,    0,  804,  805,  806,  810,
      812,  805,  806,  812,  811,  813,  814,  811,  813,  814,
        0,  807,  816,  809,  815,  816,  808,  815,  817,    0,
      818,  817,  810,  818,  809,  819,    0,  820,  819,  821,
      820,    0,  821,  812,    0,  814,    0,  815,  813,  814,
      881,  914,  881,  881,  914,  816,  882,  815,  882,  882,
      881,  817,  816,  818,  915,  818,  882,  915,  819,  819,
      820,  883,  821,  883,  883,  884,    0,  884,  884,  916,
        0,  883,  916,  881,  914,  820,    0,  821,  885,  882,

      885,  885,  886,  915,  886,  886,  887,  915,  887,  887,
      888,    0,  888,  888,  883,    0,    0,  889,  884,  889,
      889,  890,  916,  890,  890,    0,  891,  885,  891,  891,
      892,  885,  892,  892,  893,  886,  893,  893,  896,  887,
      896,  896,    0,  888,  893,  894,    0,  894,  894,    0,
      889,    0,    0,  900,  890,  900,  900,  896,  894,  891,
        0,    0,  895,  892,  895,  895,  897,  893,  897,  897,
      898,  896,  898,  898,  894,    0,  897,    0,  894,  899,
      898,  899,  899,    0,    0,    0,  900,  895,  901,  899,
      901,  901,    0,    0,  902,  895,  902,  902,  903,  897,

      903,  903,  904,  898,  904,  904,    0,    0,  905,  902,
      905,  905,  899,  906,    0,  906,  906,  907,  905,  907,
      907,  901,    0,  908,  904,  908,  908,  902,  906,    0,
      909,  903,  909,  909,  910,  904,  910,  910,    0,  911,
      917,  905,  911,  917,  912,  913,  906,  912,  913,  911,
      907,    0,    0,    0,  912,  913,  908,  918,  919,  908,
      918,  919,  907,  909,    0,  920,  921,  910,  920,  921,
        0,  922,  911,  917,  922,  909,  923,  912,  913,  923,
      925,  924,  926,  925,  924,  926,  923,    0,    0,    0,
      918,  919,  927,  928,  924,  927,  928,  929,  920,  921,

      929,  926,  927,  928,  922,  925,    0,  929,  930,  923,
      924,  930,    0,  925,  924,  926,  931,  932,  933,  931,
      932,  933,    0,    0,  934,  927,  928,  934,  935,    0,
      929,  935,  932,  936,  937,    0,  936,  937,  935,  938,
      939,  930,  938,  939,  940,    0,  934,  940,  936,  931,
      932,  933,    0,  979,    0,  979,  979,  934,    0,    0,
      980,  935,  980,  980,    0,    0,  936,  937,  981,    0,
      981,  981,  938,  939,    0,  938,    0,  940,  982,  937,
      982,  982,    0,    0,    0,  939,  979,  983,  982,  983,
      983,    0,  984,  980,  984,  984,  985,    0,  985,  985,

      986,  981,  986,  986,  987,    0,  987,  987,    0,    0,
      988,  982,  988,  988,    0,  985,  989,  984,  989,  989,
      983,  990,  986,  990,  990,  984,  987,    0,  991,  985,
      991,  991,  993,  986,  993,  993,    0,  987,  991,  992,
        0,  992,  992,  988,    0,  994,    0,  994,  994,  989,
      995,    0,  995,  995,  990,  994,    0,  996,  995,  996,
      996,  991,    0,    0,  997,  993,  997,  997,  992,    0,
      998,  999,  992,  998,  999,    0, 1000, 1001,  994, 1000,
     1001, 1002, 1003,  995, 1002, 1003,    0, 1001,    0, 1004,
      996, 1005, 1004, 1007, 1005, 1006, 1007,  997, 1006, 1008,

      997,    0, 1008,  998,  999,  996,    0, 1003, 1004, 1000,
     1001,    0,    0, 1005, 1002, 1003, 1009, 1006, 1011, 1009,
     1010, 1011, 1004, 1010, 1005,    0, 1007,    0, 1006,    0,
     1010, 1012, 1008, 1013, 1012, 1015, 1013, 1014, 1015, 1016,
     1014,    0, 1016, 1013,    0, 1014,    0, 1011,    0, 1009,
        0, 1011, 1040, 1010, 1040, 1040, 1041,    0, 1041, 1041,
     1042,    0, 1042, 1042, 1012,    0, 1013,    0, 1015,    0,
     1014, 1043, 1016, 1043, 1043, 1016,    0, 1044, 1041, 1044,
     1044, 1043, 1042, 1015, 1045, 1040, 1045, 1045, 1046, 1041,
     1046, 1046, 1044, 1042, 1047,    0, 1047, 1047, 1046, 1048,

        0, 1048, 1048, 1049, 1043, 1049, 1049,    0,    0, 1050,
     1044, 1050, 1050, 1051,    0, 1051, 1051, 1045,    0, 1052,
        0, 1046, 1052, 1053,    0, 1054, 1053, 1047, 1054,    0,
     1055,    0, 1048, 1055, 1048, 1056, 1049,    0, 1056,    0,
     1055, 1057, 1050,    0, 1057, 1053, 1051, 1054,    0,    0,
     1056, 1049, 1052,    0,    0,    0, 1053, 1050, 1054, 1058,
        0, 1051, 1058, 1055, 1059,    0,    0, 1059, 1056, 1058,
     1060,    0,    0, 1060, 1057, 1061, 1062, 1063, 1061, 1062,
     1063, 1080,    0, 1080, 1080, 1081,    0, 1081, 1081,    0,
        0, 1080, 1058, 1082,    0, 1082, 1082, 1059,    0, 1084,

     1081, 1084, 1084, 1060, 1085, 1060, 1085, 1085, 1061, 1062,
     1063,    0,    0, 1086, 1080, 1086, 1086, 1083, 1081, 1083,
     1083,    0,    0, 1061, 1062, 1063, 1082, 1083, 1087,    0,
     1087, 1087, 1084, 1088,    0, 1088, 1088, 1085, 1089, 1090,
     1085, 1089, 1090,    0, 1091,    0, 1086, 1091, 1089, 1092,
     1083,    0, 1092, 1093, 1090, 1094, 1093, 1095, 1094, 1092,
     1095, 1087, 1096,    0, 1097, 1096, 1088, 1097,    0,    0,
        0, 1089, 1090,    0,    0,    0, 1087, 1091,    0,    0,
        0, 1088, 1092,    0,    0,    0, 1093,    0, 1094, 1112,
     1095, 1094, 1112,    0,    0, 1096, 1107, 1097, 1107, 1107,

        0, 1108,    0, 1108, 1108, 1109, 1114, 1109, 1109, 1114,
     1096, 1108, 1097, 1110,    0, 1110, 1110, 1111, 1113, 1111,
     1111, 1113, 1112, 1115, 1116,    0, 1115, 1116, 1113, 1107,
     1121,    0, 1121, 1121, 1108,    0,    0,    0, 1109, 1114,
     1122, 1123, 1122, 1122, 1123, 1124, 1110,    0, 1124, 1128,
     1111, 1113, 1128,    0,    0, 1110, 1115, 1116, 1127, 1136,
     1127, 1127, 1136, 1121,    0, 1115, 1131, 1132, 1131, 1131,
     1132,    0,    0, 1122, 1123,    0, 1131, 1132, 1124,    0,
        0, 1135, 1128, 1135, 1135, 1122,    0, 1128,    0,    0,
     1124, 1127, 1136,    0,    0,    0, 1127,    0,    0, 1131,

     1132,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1135, 1138, 1138, 1138, 1138, 1138,
     1138, 1139, 1139, 1139, 1139, 1139, 1139, 1140, 1140, 1140,
     1140, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1141, 1142,
     1142, 1142, 1142, 1142, 1142, 1143, 1143,    0, 1143, 1143,
     1143, 1144, 1144, 1144, 1144, 1144, 1144, 1145,    0,    0,
        0, 1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146, 1147,
     1147,    0,    0, 1147, 1147, 1148, 1148, 1148, 1148, 1148,
     1148, 1149, 1149,    0, 1149, 1149, 1149, 1150, 1150,    0,
     1150, 1150, 1150, 1151, 1151,    0,    0,    0, 1151, 1152,

     1152,    0, 1152, 1152, 1152, 1154, 1154,    0,    0,    0,
     1154, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right, int strip_trailing)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing);
    }
    return (newstring);
}

static void settext(bool trim_right = false, int strip_trailing = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1802 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 133 "levcomp.lpp"


#line 1997 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1138 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1137 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 164 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 171 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 173 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 179 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 181 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 187 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 188 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 190 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 192 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 196 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 206 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 210 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 244 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
return COLON;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
return PERC;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
{
                        clean();
                        yylval.i = atoi(yytext);
                        return INTEGER;
                    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
;
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 281 "levcomp.lpp"
;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 285 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2566 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1138 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1138 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1137);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 285 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

